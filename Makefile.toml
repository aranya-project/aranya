[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = 1
RUSTDOCFLAGS = { value = "", condition = { env_not_set = ["RUSTDOCFLAGS"] } }
NIGHTLY = { script = ["cat rust-nightly.txt"], condition = { env_not_set = ["NIGHTLY"] } }
RUSTFLAGS = { value = "-Dwarnings", condition = { env_true = ["CARGO_MAKE_CI"] } }

[config]
default_to_workspace = false
skip_core_tasks = true
skip_git_env_info = true
skip_rust_env_info = true

[tasks.default]
description = "List available tasks"
script = "cargo make --quiet --list-all-steps --hide-uninteresting"

# =================================================================================================
# Development Flows - Quick iteration for local development
# =================================================================================================
[tasks.dev]
description = "Development flow with all features"
category = "Development"
run_task = { name = ["build", "test", "correctness"] }

[tasks.dev-default]
description = "Development flow with default features"
category = "Development"
run_task = { name = ["build-default", "test", "correctness"] }

[tasks.dev-preview]
description = "Development flow with preview features"
category = "Development"
run_task = { name = ["build-preview", "test", "correctness"] }

[tasks.dev-experimental]
description = "Development flow with experimental features"
category = "Development"
run_task = { name = ["build-experimental", "test", "correctness"] }

[tasks.correctness]
description = "Run correctness checks"
category = "Development"
run_task = { name = ["format", "check-features", "clippy", "unused-deps"] }

# =================================================================================================
# Build Tasks - Daemon builds with different feature levels
# =================================================================================================
[tasks.build]
description = "Build daemon with all features"
category = "Build"
command = "cargo"
args = ["build", "--release", "--package=aranya-daemon", "--verbose", "--all-features", "${@}"]

[tasks.build-default]
description = "Build daemon with default features"
category = "Build"
command = "cargo"
args = ["build", "--release", "--package=aranya-daemon", "--verbose", "${@}"]

[tasks.build-preview]
description = "Build daemon with preview features"
category = "Build"
command = "cargo"
args = ["build", "--release", "--package=aranya-daemon", "--verbose", "--features=preview,afc", "${@}"]

[tasks.build-experimental]
description = "Build daemon with experimental features"
category = "Build"
command = "cargo"
args = ["build", "--release", "--package=aranya-daemon", "--verbose", "--features=preview,afc,experimental,aqc", "${@}"]

[tasks.build-full]
description = "Build daemon with all features"
category = "Build"
alias = "build"

# =================================================================================================
# C API Build Tasks
# =================================================================================================
[tasks.capi]
description = "Build complete C API with all features"
category = "C API"
run_task = { name = ["capi-header", "capi-docs", "capi-lib"] }

[tasks.capi-default]
description = "Build complete C API with default features"
category = "C API"
run_task = { name = ["capi-header", "capi-docs", "capi-lib-default"] }

[tasks.capi-preview]
description = "Build complete C API with preview features"
category = "C API"
run_task = { name = ["capi-header", "capi-docs", "capi-lib-preview"] }

[tasks.capi-experimental]
description = "Build complete C API with experimental features"
category = "C API"
run_task = { name = ["capi-header", "capi-docs", "capi-lib-experimental"] }

# NOTE: From 1.87 onward, cargo-expand doesn't include cfg's, so cbindgen won't
# see them to include in the header. Until this is fixed, we cannot increase
# our MSRV beyond 1.86. See https://github.com/rust-lang/rust/issues/139715.
[tasks.capi-header]
description = "Generate C API header"
category = "C API"
cwd = "crates/aranya-client-capi"
# Fake nightly support to enable macro expansion, so we don't have to pin to nightly 1.86 (see above).
env.RUSTC_BOOTSTRAP = "1"
command = "cbindgen"
args = ["--config=cbindgen.toml", "--output=output/aranya-client.h"]
dependencies = ["install-cbindgen"]

[tasks.capi-docs]
description = "Generate C API documentation"
category = "C API"
cwd = "crates/aranya-client-capi"
command = "doxygen"

[tasks.capi-lib]
description = "Build C API library with all features"
category = "C API"
cwd = "crates/aranya-client-capi"
extend = "build"
args = ["build", "--release", "--all-features"]

[tasks.capi-lib-default]
description = "Build C API library with default features"
category = "C API"
cwd = "crates/aranya-client-capi"
command = "cargo"
args = ["build", "--release"]

[tasks.capi-lib-preview]
description = "Build C API library with preview features"
category = "C API"
cwd = "crates/aranya-client-capi"
command = "cargo"
args = ["build", "--release", "--features=preview,afc"]

[tasks.capi-lib-experimental]
description = "Build C API library with experimental features"
category = "C API"
cwd = "crates/aranya-client-capi"
command = "cargo"
args = ["build", "--release", "--features=preview,afc,experimental,aqc"]

[tasks.capi-lib-full]
description = "Build C API library with all features"
category = "C API"
alias = "capi-lib"

# =================================================================================================
# CI Flows - Comprehensive testing for continuous integration
# =================================================================================================
[tasks.ci-correctness]
description = "CI correctness checks (mirrors correctness.yml)"
category = "CI"
run_task = { name = ["check-format", "clippy", "unused-deps", "check-features"] }

[tasks.ci-tests]
description = "CI test checks (mirrors tests.yml)"
category = "CI"
run_task = { name = ["test", "example-c", "example-rust"] }

[tasks.ci-build]
description = "CI build checks (mirrors build.yml)"
category = "CI"
run_task = { name = ["build", "package-daemon", "capi-header", "capi-lib", "package-capi", "git-unchanged"] }

[tasks.ci-build-default]
description = "CI build checks with default features"
category = "CI"
run_task = { name = ["build-default", "package-daemon", "capi-header", "capi-lib-default", "package-capi", "git-unchanged"] }

[tasks.ci-build-preview]
description = "CI build checks with preview features"
category = "CI"
run_task = { name = ["build-preview", "package-daemon", "capi-header", "capi-lib-preview", "package-capi", "git-unchanged"] }

[tasks.ci-build-experimental]
description = "CI build checks with experimental features"
category = "CI"
run_task = { name = ["build-experimental", "package-daemon", "capi-header", "capi-lib-experimental", "package-capi", "git-unchanged"] }

[tasks.ci-docs]
description = "CI documentation checks (mirrors doc.yml)"
category = "CI"
env = { RUSTDOCFLAGS = "-Dwarnings" }
run_task = { name = ["capi-docs", "package-capi-docs", "doc"] }

[tasks.ci-security]
description = "CI security checks (mirrors security.yml)"
category = "CI"
run_task = { name = ["security-flow"] }

[tasks.ci-complete]
description = "Complete CI - all checks that run in GitHub Actions"
category = "CI"
run_task = { name = ["ci-correctness", "ci-tests", "ci-build", "ci-docs", "ci-security"] }

[tasks.ci-complete-default]
description = "Complete CI with default features"
category = "CI"
run_task = { name = ["ci-correctness", "ci-tests", "ci-build-default", "ci-docs", "ci-security"] }

[tasks.ci-complete-preview]
description = "Complete CI with preview features"
category = "CI"
run_task = { name = ["ci-correctness", "ci-tests", "ci-build-preview", "ci-docs", "ci-security"] }

[tasks.ci-complete-experimental]
description = "Complete CI with experimental features"
category = "CI"
run_task = { name = ["ci-correctness", "ci-tests", "ci-build-experimental", "ci-docs", "ci-security"] }

# =================================================================================================
# Quality Assurance Flows
# =================================================================================================
[tasks.qa-flow]
description = "Quality assurance checks"
category = "Quality"
run_task = { name = ["check-format", "clippy", "check-features", "security-flow"] }

[tasks.qa-complete]
description = "Quality assurance checks"
category = "Quality"
run_task = { name = ["qa-flow", "test", "example-c", "example-rust"] }

# =================================================================================================
# Release Flow - For creating releases with packaged artifacts
# =================================================================================================
[tasks.release-flow]
description = "Release flow - CI checks + artifact packaging"
category = "Release"
run_task = { name = ["ci-complete", "package-daemon", "package-capi", "package-docs"] }

[tasks.release-flow-default]
description = "Release flow with default features"
category = "Release"
run_task = { name = ["ci-complete-default", "package-daemon", "package-capi", "package-docs"] }

[tasks.release-flow-preview]
description = "Release flow with preview features"
category = "Release"
run_task = { name = ["ci-complete-preview", "package-daemon", "package-capi", "package-docs"] }

[tasks.release-flow-experimental]
description = "Release flow with experimental features"
category = "Release"
run_task = { name = ["ci-complete-experimental", "package-daemon", "package-capi", "package-docs"] }

# =================================================================================================
# Format Tasks - Code formatting
# =================================================================================================
[tasks.format]
description = "Format all code"
category = "Quality"
dependencies = ["format-rust", "format-toml"]

[tasks.format-rust]
description = "Format Rust code with nightly"
category = "Quality"
toolchain = "${NIGHTLY}"
command = "cargo"
args = ["fmt", "--all"]
dependencies = ["install-nightly"]

[tasks.format-toml]
description = "Format TOML files"
category = "Quality"
script = "git ls-files -z '*.toml' | xargs -0 taplo fmt"
dependencies = ["install-taplo"]

[tasks.check-format]
description = "Check code formatting"
category = "Quality"
dependencies = ["check-format-rust", "check-format-toml"]

[tasks.check-format-rust]
description = "Check Rust formatting with nightly"
category = "Quality"
toolchain = "${NIGHTLY}"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]
dependencies = ["install-nightly"]

[tasks.check-format-toml]
description = "Check TOML formatting"
category = "Quality"
script = "git ls-files -z '*.toml' | xargs -0 -- taplo fmt --check --diff"
dependencies = ["install-taplo"]

# =================================================================================================
# Quality Assurance Tasks
# =================================================================================================
[tasks.clippy]
description = "Check code quality using clippy lints"
category = "Quality"
workspace = true
script = '''
cargo clippy
cargo clippy --all-targets
# cargo clippy --no-default-features (TODO: uncomment in #448)
cargo clippy --all-targets --all-features
'''
dependencies = ["install-clippy"]

[tasks.check-features]
description = "Check all feature combinations"
category = "Quality"
workspace = true
command = "cargo"
args = ["check-all-features", "--verbose"]
dependencies = ["install-cargo-all-features"]

[tasks.unused-deps]
description = "Check for unused dependencies"
category = "Quality"
command = "cargo"
args = ["machete"]
dependencies = ["install-cargo-machete"]

[tasks.security-flow]
description = "Run security checks"
category = "Security"
run_task = { name = ["audit", "deny", "vet"] }

[tasks.audit]
description = "Audit dependencies for vulnerabilities"
category = "Security"
command = "cargo"
args = ["audit"]
dependencies = ["install-cargo-audit"]

[tasks.deny]
description = "Check dependencies licenses and sources"
category = "Security"
command = "cargo"
args = ["deny", "check"]
dependencies = ["install-cargo-deny"]

[tasks.vet]
description = "Verify dependency authenticity"
category = "Security"
command = "cargo"
args = ["vet", "check"]
dependencies = ["install-cargo-vet"]

# =================================================================================================
# Documentation
# =================================================================================================
[tasks.doc]
description = "Generate documentation with nightly"
category = "Documentation"
toolchain = "${NIGHTLY}"
command = "cargo"
args = ["doc", "--all-features"]
env = { RUSTDOCFLAGS = "--cfg docsrs ${RUSTDOCFLAGS}" }
dependencies = ["install-nightly"]

# =================================================================================================
# Testing
# =================================================================================================
[tasks.test]
description = "Run unit tests with all feature flag combinations"
category = "Testing"
workspace = true
command = "cargo"
args = ["--verbose", "test-all-features", "${@}"]
dependencies = ["install-cargo-all-features"]

# =================================================================================================
# Example Tasks
# =================================================================================================
[tasks.example-c]
description = "Run C example with all features"
category = "Examples"
cwd = "examples/c"
script = "./run.bash"
dependencies = ["capi"]

[tasks.example-c-default]
description = "Run C example with default features"
category = "Examples"
cwd = "examples/c"
script = "./run.bash default"
dependencies = ["capi-default"]

[tasks.example-c-preview]
description = "Run C example with preview features"
category = "Examples"
cwd = "examples/c"
script = "./run.bash preview"
dependencies = ["capi-preview"]

[tasks.example-c-experimental]
description = "Run C example with experimental features"
category = "Examples"
cwd = "examples/c"
script = "./run.bash experimental"
dependencies = ["capi-experimental"]

[tasks.example-rust]
description = "Run Rust example application"
category = "Examples"
cwd = "examples/rust"
script = "./run.bash"

[tasks.examples-flow]
description = "Run all examples"
category = "Examples"
run_task = { name = [
    "example-c-default",
    "example-c-preview",
    "example-c-experimental",
    "example-c",
    "example-rust",
] }

# =================================================================================================
# Packaging Tasks
# =================================================================================================
[tasks.package-daemon]
description = "Package daemon binary"
category = "Packaging"
script = "tar -czf aranya-daemon.tar.gz -C target/release aranya-daemon"

[tasks.package-capi]
description = "Package C API artifacts"
category = "Packaging"
script = '''
#!/usr/bin/env bash
set -euo pipefail
temp_dir="$(mktemp -d)"
mkdir -p "${temp_dir}/"{lib,cmake,include}

# Copy platform-specific library
if [[ "$OSTYPE" == "darwin"* ]]; then
    cp target/release/libaranya_client_capi.dylib "${temp_dir}/lib/"
else
    cp target/release/libaranya_client_capi.so "${temp_dir}/lib/"
fi

cp examples/c/cmake/AranyaConfig.cmake "${temp_dir}/cmake/"
cp crates/aranya-client-capi/output/aranya-client.h "${temp_dir}/include/"
tar -cvzf aranya-client-lib.tar.gz -C "${temp_dir}" .
rm -rf "${temp_dir}"
'''
dependencies = ["capi"]

[tasks.package-docs]
description = "Package documentation"
category = "Packaging"
run_task = { name = ["package-rust-docs", "package-capi-docs"] }

[tasks.package-rust-docs]
description = "Package Rust documentation"
category = "Packaging"
script = "tar -czf rust-docs.tar.gz -C target/doc ."
dependencies = ["doc"]

[tasks.package-capi-docs]
description = "Package C API documentation"
category = "Packaging"
script = "tar -cvzf aranya-client-capi-docs.tar.gz -C crates/aranya-client-capi/docs ."
dependencies = ["capi-docs"]

# =================================================================================================
# Metrics Collection
# =================================================================================================
[tasks.metrics]
description = "Run metrics collection"
category = "Metrics"
script = '''
#!/usr/bin/env bash
set -e
cargo build --bin aranya-daemon --release --features=experimental,aqc
cargo build --bin aranya-metrics --release
CONFIG_PATH=$(pwd)/crates/aranya-metrics/example-metrics.toml \
    $(pwd)/target/release/aranya-metrics $(pwd)/target/release/aranya-daemon
'''

[tasks.metrics-prometheus]
description = "Run metrics collection with Prometheus"
category = "Metrics"
script = "crates/aranya-metrics/prometheus.bash"

# =================================================================================================
# Utility Tasks
# =================================================================================================
[tasks.git-unchanged]
description = "Verify files are unchanged"
category = "Utilities"
script = '''
git diff
status=$(git status -s)
if [ -n "$status" ]; then
    echo "$status"
    exit 1
fi
'''

# =================================================================================================
# External Tool Instllation - All external dependencies
# =================================================================================================
[tasks.install-nightly]
description = "Install nightly Rust toolchain"
category = "Install"
private = true
# First check if the toolchain is installed, because that is much faster.
# Don't do this if you want to keep a rolling channel up-to-date.
script = "rustup run ${NIGHTLY} true 2>/dev/null || rustup toolchain install ${NIGHTLY} --profile minimal -c rustfmt"

[tasks.install-cbindgen]
description = "Install cbindgen"
category = "Install"
private = true
install_crate = { crate_name = "cbindgen", version = "0.29.0", binary = "cbindgen", test_arg = ["-V"] }

[tasks.install-clippy]
description = "Install clippy"
category = "Install"
private = true
install_crate = { rustup_component_name = "clippy" }

[tasks.install-taplo]
description = "Install taplo-cli for TOML formatting"
category = "Install"
private = true
install_crate = { crate_name = "taplo-cli", version = "0.9.3", binary = "taplo", test_arg = ["-V"] }

[tasks.install-cargo-all-features]
description = "Install cargo-all-features"
category = "Install"
private = true
install_crate = { crate_name = "cargo-all-features", version = "1.10.0", binary = "cargo-check-all-features", test_arg = ["-V"] }

[tasks.install-cargo-machete]
description = "Install cargo-machete"
category = "Install"
private = true
install_crate = { crate_name = "cargo-machete", version = "0.8.0", binary = "cargo-machete", test_arg = "--version" }

[tasks.install-cargo-audit]
description = "Install cargo-audit"
category = "Install"
private = true
install_crate = { crate_name = "cargo-audit", version = "0.21.2", binary = "cargo-audit", test_arg = "-V" }

[tasks.install-cargo-deny]
description = "Install cargo-deny"
category = "Install"
private = true
install_crate = { crate_name = "cargo-deny", version = "0.18.2", binary = "cargo-deny", test_arg = "-V" }

[tasks.install-cargo-vet]
description = "Install cargo-vet"
category = "Install"
private = true
install_crate = { crate_name = "cargo-vet", version = "0.10.0", binary = "cargo-vet", test_arg = "-V" }
