# Workflow for automating Rust crate release.

name: Release

permissions:
  pull-requests: write
  contents: write

on:
  push:
    branches:
      - main

jobs:
  # Publish unpublished crates and create a git tag
  tag:
    name: Tag
    runs-on: ubuntu-latest
    concurrency:
      group: release-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: ./.github/actions/setup

      - name: Install cargo-release
        uses: aranya-project/install-action@main
        with:
          tool: cargo-release@0.25.15

      - name: Create tags
        id: tag
        run: |
          cargo release tag -v --execute --no-confirm
        # Continue on error so we don't get a CI failure (red X) when no release is needed.
        # Each following step must check `steps.tag.outcome` (NOT `steps.tag.conclusion`).
        continue-on-error: true

      - name: Publish to crates.io
        if: success() && steps.tag.outcome == 'success'
        run: |
          cargo release publish -v --execute --no-confirm
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.ARANYA_BOT_CRATESIO_CARGO_LOGIN_KEY }}

      - name: Push tags to github
        id: push
        if: success() && steps.tag.outcome == 'success'
        run: |
          cargo release push -v --execute --no-confirm

      - name: Version
        if: success()
        run: |
          echo "VERSION=$(cargo metadata --format-version=1 --no-deps | jq --raw-output '.packages[0].version')" >> $GITHUB_OUTPUT
        id: version

    outputs:
      tag: v${{ steps.version.outputs.VERSION }}
      outcome: ${{ steps.push.outcome }}

  publish:
    needs:
      - tag
    if: needs.tag.outputs.outcome == 'success'
    uses: ./.github/workflows/publish.yml
    with:
      workflow: publish
      tag: ${{ needs.tag.outputs.tag }}
