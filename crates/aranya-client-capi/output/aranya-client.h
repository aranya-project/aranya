/*
 * Copyright (c) SpiderOak, Inc. All rights reserved.
 */
/**
 * @file aranya-client.h
 * @brief External header file containing C function definitions
 * for the Aranya client library.
 */
 

#ifndef ARANYA_CLIENT_H
#define ARANYA_CLIENT_H

#pragma once

/* Code generated by `capi`. DO NOT EDIT. */

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <sys/socket.h>

#ifndef __has_attribute
    #define __has_attribute(x) 0
#endif /* __has_attribute */

#if !defined(ARANYA_ALIGNED)
    #if __has_attribute(aligned)
        #define ARANYA_ALIGNED(n) __attribute__((aligned(n)))
    #else
        #error "compiler must support `aligned` attribute"
    #endif
#endif /* ARANYA_ALIGNED */

#if !defined(ARANYA_DESIGNATED_INIT)
    #if __has_attribute(designated_init)
        #define ARANYA_DESIGNATED_INIT __attribute__((designated_init))
    #else
        #define ARANYA_DESIGNATED_INIT
    #endif
#endif /* ARANYA_DESIGNATED_INIT */

#if !defined(ARANYA_MUST_USE)
    #if __has_attribute(warn_unused_result)
        #define ARANYA_MUST_USE __attribute__((warn_unused_result))
    #else
        #define ARANYA_MUST_USE
    #endif
#endif /* ARANYA_MUST_USE */

#if !defined(ARANYA_NO_RETURN)
    #if __has_attribute(noreturn)
        #define ARANYA_NO_RETURN __attribute__((noreturn))
    #else
        #define ARANYA_NO_RETURN
    #endif
#endif /* ARANYA_NO_RETURN */

#if !defined(ARANYA_NON_NULL)
    #if defined(__gnu__)
        #if __has_attribute(nonnull)
            #define ARANYA_NON_NULL __attribute__((nonnull))
        #endif
    #elif defined(__clang__)
        #define ARANYA_NON_NULL _Nonnull
    #else
        #define ARANYA_NON_NULL
    #endif
#endif /* ARANYA_NON_NULL */

#if !defined(ARANYA_PACKED)
    #if __has_attribute(packed)
        #define ARANYA_PACKED __attribute__((packed))
    #else
        #define ARANYA_PACKED
    #endif
#endif /* ARANYA_PACKED */


/**
 * The size in bytes of an ID
 */
#define ARANYA_ID_LEN 64

#define ARANYA_DURATION_SECONDS (1000 * ARANYA_DURATION_MILLISECONDS)

#define ARANYA_DURATION_MILLISECONDS (1000 * ARANYA_DURATION_MICROSECONDS)

#define ARANYA_DURATION_MICROSECONDS (1000 * ARANYA_DURATION_NANOSECONDS)

#define ARANYA_DURATION_NANOSECONDS 1

/**
 * The size in bytes of an ID converted to a human-readable base58 string.
 */
#define ARANYA_ID_STR_LEN (((ARANYA_ID_LEN * 1375) / 1000) + 1)

/**
 * Valid channel operations for a label assignment.
 */
enum AranyaChanOp
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
    /**
     * The device can only receive data in channels with this
     * label.
     */
    ARANYA_CHAN_OP_RECV_ONLY,
    /**
     * The device can only send data in channels with this
     * label.
     */
    ARANYA_CHAN_OP_SEND_ONLY,
    /**
     * The device can send and receive data in channels with this
     * label.
     */
    ARANYA_CHAN_OP_SEND_RECV,
};
#ifndef __cplusplus
typedef uint8_t AranyaChanOp;
#endif // __cplusplus

/**
 * An error code.
 *
 * For extended error information, see [`AranyaExtError`](@ref AranyaExtError).
 */
enum AranyaError
#ifdef __cplusplus
  : uint32_t
#endif // __cplusplus
 {
    /**
     * Success.
     */
    ARANYA_ERROR_SUCCESS,
    /**
     * Internal bug discovered.
     */
    ARANYA_ERROR_BUG,
    /**
     * Timed out.
     */
    ARANYA_ERROR_TIMEOUT,
    /**
     * Logging initialization failure.
     */
    ARANYA_ERROR_LOG_INIT,
    /**
     * Invalid argument.
     */
    ARANYA_ERROR_INVALID_ARGUMENT,
    /**
     * Buffer is too small.
     */
    ARANYA_ERROR_BUFFER_TOO_SMALL,
    /**
     * Invalid UTF-8.
     */
    ARANYA_ERROR_INVALID_UTF8,
    /**
     * Invalid Address.
     */
    ARANYA_ERROR_INVALID_ADDR,
    /**
     * Error connecting to daemon.
     */
    ARANYA_ERROR_CONNECTING,
    /**
     * Could not send request to daemon.
     */
    ARANYA_ERROR_RPC,
    /**
     * Daemon reported error.
     */
    ARANYA_ERROR_DAEMON,
    /**
     * AQC library error.
     */
    ARANYA_ERROR_AQC,
    /**
     * Failed trying to construct a new tokio runtime.
     */
    ARANYA_ERROR_RUNTIME,
    /**
     * Unable to create configuration info.
     */
    ARANYA_ERROR_CONFIG,
    /**
     * Serialization error.
     */
    ARANYA_ERROR_SERIALIZATION,
    /**
     * CString allocation error.
     */
    ARANYA_ERROR_C_STRING,
};
#ifndef __cplusplus
typedef uint32_t AranyaError;
#endif // __cplusplus

/**
 * Valid operations that roles can perform.
 */
enum AranyaOp
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
    /**
     * Add a member device to team.
     */
    ARANYA_OP_ADD_MEMBER,
    /**
     * Remove a member device from team.
     */
    ARANYA_OP_REMOVE_MEMBER,
    /**
     * Assign device precedence to a device.
     */
    ARANYA_OP_ASSIGN_DEVICE_PRECEDENCE,
    /**
     * Create a role on team.
     */
    ARANYA_OP_CREATE_ROLE,
    /**
     * Delete a role from team.
     */
    ARANYA_OP_DELETE_ROLE,
    /**
     * Assign a role to a device.
     */
    ARANYA_OP_ASSIGN_ROLE,
    /**
     * Revoke a role from a device.
     */
    ARANYA_OP_REVOKE_ROLE,
    /**
     * Assign operation to a role.
     */
    ARANYA_OP_ASSIGN_ROLE_OP,
    /**
     * Revoke operation from a role.
     */
    ARANYA_OP_REVOKE_ROLE_OP,
    /**
     * Create a label on team.
     */
    ARANYA_OP_CREATE_LABEL,
    /**
     * Delete a label from team.
     */
    ARANYA_OP_DELETE_LABEL,
    /**
     * Assign a label to a device.
     */
    ARANYA_OP_ASSIGN_LABEL,
    /**
     * Revoke a label from a device.
     */
    ARANYA_OP_REVOKE_LABEL,
    /**
     * Set an AQC network name.
     */
    ARANYA_OP_SET_AQC_NETWORK_NAME,
    /**
     * Unset an AQC network name.
     */
    ARANYA_OP_UNSET_AQC_NETWORK_NAME,
    /**
     * Create an AQC bidi channel.
     */
    ARANYA_OP_AQC_CREATE_BIDI_CHANNEL,
    /**
     * Create an AQC uni channel.
     */
    ARANYA_OP_AQC_CREATE_UNI_CHANNEL,
};
#ifndef __cplusplus
typedef uint8_t AranyaOp;
#endif // __cplusplus

/**
 * Extended error information.
 */
typedef struct ARANYA_ALIGNED(8) AranyaExtError {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[88];
} AranyaExtError;

/**
 * A handle to an Aranya Client.
 */
typedef struct ARANYA_ALIGNED(16) AranyaClient {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[3728];
} AranyaClient;

/**
 * Builder for a Sync Peer config.
 */
typedef struct ARANYA_ALIGNED(8) AranyaSyncPeerConfigBuilder {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[40];
} AranyaSyncPeerConfigBuilder;

/**
 * Configuration info builder for Aranya QUIC Channels.
 */
typedef struct ARANYA_ALIGNED(8) AranyaAqcConfigBuilder {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[24];
} AranyaAqcConfigBuilder;

/**
 * Configuration info for Aranya QUIC Channels.
 */
typedef struct ARANYA_ALIGNED(8) AranyaAqcConfig {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[40];
} AranyaAqcConfig;

/**
 * Configuration info builder for Aranya.
 */
typedef struct ARANYA_ALIGNED(8) AranyaClientConfigBuilder {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[72];
} AranyaClientConfigBuilder;

/**
 * Configuration info for Aranya.
 */
typedef struct ARANYA_ALIGNED(8) AranyaClientConfig {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[56];
} AranyaClientConfig;

typedef struct AranyaId {
    uint8_t bytes[ARANYA_ID_LEN];
} AranyaId;

/**
 * Device ID.
 */
typedef struct AranyaDeviceId {
    struct AranyaId id;
} AranyaDeviceId;

typedef struct ARANYA_ALIGNED(8) AranyaTeamConfigBuilder {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[16];
} AranyaTeamConfigBuilder;

typedef struct ARANYA_ALIGNED(8) AranyaTeamConfig {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[24];
} AranyaTeamConfig;

/**
 * Team ID.
 */
typedef struct AranyaTeamId {
    struct AranyaId id;
} AranyaTeamId;

/**
 * A network socket address for an Aranya client.
 *
 * E.g. "localhost:8080", "127.0.0.1:8080"
 */
typedef const char *AranyaAddr;

/**
 * Sync Peer config.
 */
typedef struct ARANYA_ALIGNED(8) AranyaSyncPeerConfig {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[32];
} AranyaSyncPeerConfig;

/**
 * A role name.
 *
 * E.g. "owner"
 */
typedef const char *AranyaRoleName;

/**
 * A role.
 */
typedef struct ARANYA_ALIGNED(8) AranyaRole {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[96];
} AranyaRole;

/**
 * Role ID.
 */
typedef struct AranyaRoleId {
    struct AranyaId id;
} AranyaRoleId;

/**
 * A device precedence.
 *
 * Determines whether the author of a graph command has permission
 * to execute a command on a target device with lower priority.
 */
typedef int64_t AranyaDevicePrecedence;

/**
 * A network identifier for an Aranya client.
 *
 * E.g. "localhost:8080", "127.0.0.1:8080"
 */
typedef const char *AranyaNetIdentifier;

/**
 * An AQC label name.
 *
 * E.g. "TELEMETRY_LABEL"
 */
typedef const char *AranyaLabelName;

/**
 * A label.
 */
typedef struct ARANYA_ALIGNED(8) AranyaLabel {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[96];
} AranyaLabel;

/**
 * Label ID.
 */
typedef struct AranyaLabelId {
    struct AranyaId id;
} AranyaLabelId;

/**
 * Valid operations that roles can perform.
 */
typedef struct ARANYA_ALIGNED(8) AranyaOperation {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[24];
} AranyaOperation;

/**
 * Channel ID for AQC bidi channel.
 */
typedef struct AranyaAqcBidiChannelId {
    struct AranyaId id;
} AranyaAqcBidiChannelId;

/**
 * Channel ID for AQC uni channel.
 */
typedef struct AranyaAqcUniChannelId {
    struct AranyaId id;
} AranyaAqcUniChannelId;

/**
 * A type to represent a span of time in nanoseconds.
 */
typedef uint64_t AranyaDuration;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Returns a human-readable error message for an [`AranyaError`](@ref AranyaError).
 *
 * The resulting pointer must NOT be freed.
 *
 * @param err `u32` error code from `AranyaError`.
 *
 * @relates AranyaError.
 */
const char *aranya_error_to_str(uint32_t err);

/**
 * Initializes `AranyaExtError`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_init(struct AranyaExtError *out);

/**
 * Initializes `AranyaExtError`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_init_ext(struct AranyaExtError *out,
                                      struct AranyaExtError *__ext_err);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_ext_error_init`.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_cleanup(struct AranyaExtError *ptr);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_ext_error_init`.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_cleanup_ext(struct AranyaExtError *ptr,
                                         struct AranyaExtError *__ext_err);

/**
 * Copies the extended error's message into `msg`.
 *
 * If `msg_len` is large enough to fit the entire message,
 * including the trailing null byte, it updates `msg_len`
 * with the length of the message and copies the message
 * into `msg`.
 *
 * Otherwise, if `msg_len` is not large enough to fit the
 * entire message, including the trailing null byte, it
 * updates `msg_len` with the length of the message and
 * returns `::ARANYA_ERROR_BUFFER_TOO_SMALL`.
 *
 * @param err the error to get a message for [`AranyaExtError`](@ref AranyaExtError).
 * @param msg buffer to copy error message into.
 * @param msg_len length of the message buffer.
 *
 * @relates AranyaExtError.
 */
AranyaError aranya_ext_error_msg(const struct AranyaExtError *err,
                                 char *msg,
                                 size_t *msg_len);

/**
 * Copies the extended error's message into `msg`.
 *
 * If `msg_len` is large enough to fit the entire message,
 * including the trailing null byte, it updates `msg_len`
 * with the length of the message and copies the message
 * into `msg`.
 *
 * Otherwise, if `msg_len` is not large enough to fit the
 * entire message, including the trailing null byte, it
 * updates `msg_len` with the length of the message and
 * returns `::ARANYA_ERROR_BUFFER_TOO_SMALL`.
 *
 * @param err the error to get a message for [`AranyaExtError`](@ref AranyaExtError).
 * @param msg buffer to copy error message into.
 * @param msg_len length of the message buffer.
 *
 * @relates AranyaExtError.
 */
AranyaError aranya_ext_error_msg_ext(const struct AranyaExtError *err,
                                     char *msg,
                                     size_t *msg_len,
                                     struct AranyaExtError *__ext_err);

/**
 * Initializes logging.
 *
 * Assumes the `ARANYA_CAPI` environment variable has been set to the desired tracing log level.
 * E.g. `ARANYA_CAPI=debug`.
 */
AranyaError aranya_init_logging(void);

/**
 * Initializes logging.
 *
 * Assumes the `ARANYA_CAPI` environment variable has been set to the desired tracing log level.
 * E.g. `ARANYA_CAPI=debug`.
 */
AranyaError aranya_init_logging_ext(struct AranyaExtError *__ext_err);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_client_init`.
 *
 * @relates AranyaClient
 */
AranyaError aranya_client_cleanup(struct AranyaClient *ptr);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_client_init`.
 *
 * @relates AranyaClient
 */
AranyaError aranya_client_cleanup_ext(struct AranyaClient *ptr,
                                      struct AranyaExtError *__ext_err);

/**
 * Initializes `AranyaSyncPeerConfigBuilder`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaSyncPeerConfigBuilder
 */
AranyaError aranya_sync_peer_config_builder_init(struct AranyaSyncPeerConfigBuilder *out);

/**
 * Initializes `AranyaSyncPeerConfigBuilder`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaSyncPeerConfigBuilder
 */
AranyaError aranya_sync_peer_config_builder_init_ext(struct AranyaSyncPeerConfigBuilder *out,
                                                     struct AranyaExtError *__ext_err);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_sync_peer_config_builder_init`.
 *
 * @relates AranyaSyncPeerConfigBuilder
 */
AranyaError aranya_sync_peer_config_builder_cleanup(struct AranyaSyncPeerConfigBuilder *ptr);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_sync_peer_config_builder_init`.
 *
 * @relates AranyaSyncPeerConfigBuilder
 */
AranyaError aranya_sync_peer_config_builder_cleanup_ext(struct AranyaSyncPeerConfigBuilder *ptr,
                                                        struct AranyaExtError *__ext_err);

/**
 * Initializes `AranyaAqcConfigBuilder`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaAqcConfigBuilder
 */
AranyaError aranya_aqc_config_builder_init(struct AranyaAqcConfigBuilder *out);

/**
 * Initializes `AranyaAqcConfigBuilder`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaAqcConfigBuilder
 */
AranyaError aranya_aqc_config_builder_init_ext(struct AranyaAqcConfigBuilder *out,
                                               struct AranyaExtError *__ext_err);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_aqc_config_builder_init`.
 *
 * @relates AranyaAqcConfigBuilder
 */
AranyaError aranya_aqc_config_builder_cleanup(struct AranyaAqcConfigBuilder *ptr);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_aqc_config_builder_init`.
 *
 * @relates AranyaAqcConfigBuilder
 */
AranyaError aranya_aqc_config_builder_cleanup_ext(struct AranyaAqcConfigBuilder *ptr,
                                                  struct AranyaExtError *__ext_err);

/**
 * Sets the address that the AQC server should bind to for listening.
 *
 * @param cfg a pointer to the aqc config builder
 * @param address a string with the address to bind to
 */
AranyaError aranya_aqc_config_builder_set_address(struct AranyaAqcConfigBuilder *cfg,
                                                  const char *address);

/**
 * Sets the address that the AQC server should bind to for listening.
 *
 * @param cfg a pointer to the aqc config builder
 * @param address a string with the address to bind to
 */
AranyaError aranya_aqc_config_builder_set_address_ext(struct AranyaAqcConfigBuilder *cfg,
                                                      const char *address,
                                                      struct AranyaExtError *__ext_err);

/**
 * Attempts to construct an [`AranyaAqcConfig`](@ref AranyaAqcConfig), returning an `Error::Config`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the aqc config builder
 * @param out a pointer to write the aqc config to
 */
AranyaError aranya_aqc_config_builder_build(struct AranyaAqcConfigBuilder *cfg,
                                            struct AranyaAqcConfig *out);

/**
 * Attempts to construct an [`AranyaAqcConfig`](@ref AranyaAqcConfig), returning an `Error::Config`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the aqc config builder
 * @param out a pointer to write the aqc config to
 */
AranyaError aranya_aqc_config_builder_build_ext(struct AranyaAqcConfigBuilder *cfg,
                                                struct AranyaAqcConfig *out,
                                                struct AranyaExtError *__ext_err);

/**
 * Initializes `AranyaClientConfigBuilder`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaClientConfigBuilder
 */
AranyaError aranya_client_config_builder_init(struct AranyaClientConfigBuilder *out);

/**
 * Initializes `AranyaClientConfigBuilder`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaClientConfigBuilder
 */
AranyaError aranya_client_config_builder_init_ext(struct AranyaClientConfigBuilder *out,
                                                  struct AranyaExtError *__ext_err);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_client_config_builder_init`.
 *
 * @relates AranyaClientConfigBuilder
 */
AranyaError aranya_client_config_builder_cleanup(struct AranyaClientConfigBuilder *ptr);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_client_config_builder_init`.
 *
 * @relates AranyaClientConfigBuilder
 */
AranyaError aranya_client_config_builder_cleanup_ext(struct AranyaClientConfigBuilder *ptr,
                                                     struct AranyaExtError *__ext_err);

/**
 * Sets the daemon address that the Client should try to connect to.
 *
 * @param cfg a pointer to the client config builder
 * @param address a string containing the address
 */
AranyaError aranya_client_config_builder_set_daemon_addr(struct AranyaClientConfigBuilder *cfg,
                                                         const char *address);

/**
 * Sets the daemon address that the Client should try to connect to.
 *
 * @param cfg a pointer to the client config builder
 * @param address a string containing the address
 */
AranyaError aranya_client_config_builder_set_daemon_addr_ext(struct AranyaClientConfigBuilder *cfg,
                                                             const char *address,
                                                             struct AranyaExtError *__ext_err);

/**
 * Attempts to construct a [`AranyaClientConfig`](@ref AranyaClientConfig), returning an `Error::Config`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the client config builder
 * @param out a pointer to write the client config to
 */
AranyaError aranya_client_config_builder_build(struct AranyaClientConfigBuilder *cfg,
                                               struct AranyaClientConfig *out);

/**
 * Attempts to construct a [`AranyaClientConfig`](@ref AranyaClientConfig), returning an `Error::Config`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the client config builder
 * @param out a pointer to write the client config to
 */
AranyaError aranya_client_config_builder_build_ext(struct AranyaClientConfigBuilder *cfg,
                                                   struct AranyaClientConfig *out,
                                                   struct AranyaExtError *__ext_err);

/**
 * Sets the configuration for Aranya QUIC Channels.
 *
 * @param cfg a pointer to the client config builder
 * @param aqc_config a pointer to a valid AQC config (see [`AranyaAqcConfigBuilder`](@ref AranyaAqcConfigBuilder))
 */
AranyaError aranya_client_config_builder_set_aqc_config(struct AranyaClientConfigBuilder *cfg,
                                                        const struct AranyaAqcConfig *aqc_config);

/**
 * Sets the configuration for Aranya QUIC Channels.
 *
 * @param cfg a pointer to the client config builder
 * @param aqc_config a pointer to a valid AQC config (see [`AranyaAqcConfigBuilder`](@ref AranyaAqcConfigBuilder))
 */
AranyaError aranya_client_config_builder_set_aqc_config_ext(struct AranyaClientConfigBuilder *cfg,
                                                            const struct AranyaAqcConfig *aqc_config,
                                                            struct AranyaExtError *__ext_err);

/**
 * Initializes a new client instance.
 *
 * @param client the uninitialized Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param config the client's configuration [`AranyaClientConfig`](@ref AranyaClientConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_client_init(struct AranyaClient *client,
                               const struct AranyaClientConfig *config);

/**
 * Initializes a new client instance.
 *
 * @param client the uninitialized Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param config the client's configuration [`AranyaClientConfig`](@ref AranyaClientConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_client_init_ext(struct AranyaClient *client,
                                   const struct AranyaClientConfig *config,
                                   struct AranyaExtError *__ext_err);

/**
 * Gets the public key bundle for this device.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param keybundle keybundle byte buffer `KeyBundle`.
 * @param keybundle_len returns the length of the serialized keybundle.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_key_bundle(struct AranyaClient *client,
                                  uint8_t *keybundle,
                                  size_t *keybundle_len);

/**
 * Gets the public key bundle for this device.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param keybundle keybundle byte buffer `KeyBundle`.
 * @param keybundle_len returns the length of the serialized keybundle.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_key_bundle_ext(struct AranyaClient *client,
                                      uint8_t *keybundle,
                                      size_t *keybundle_len,
                                      struct AranyaExtError *__ext_err);

/**
 * Gets the public device ID.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param __output the client's device ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_device_id(struct AranyaClient *client,
                                 struct AranyaDeviceId *__output);

/**
 * Gets the public device ID.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param __output the client's device ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_device_id_ext(struct AranyaClient *client,
                                     struct AranyaDeviceId *__output,
                                     struct AranyaExtError *__ext_err);

/**
 * Attempts to construct a [`AranyaTeamConfig`](@ref AranyaTeamConfig), returning an `Error::Config`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the team config builder
 * @param out a pointer to write the team config to
 */
AranyaError aranya_team_config_builder_build(struct AranyaTeamConfigBuilder *cfg,
                                             struct AranyaTeamConfig *out);

/**
 * Attempts to construct a [`AranyaTeamConfig`](@ref AranyaTeamConfig), returning an `Error::Config`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the team config builder
 * @param out a pointer to write the team config to
 */
AranyaError aranya_team_config_builder_build_ext(struct AranyaTeamConfigBuilder *cfg,
                                                 struct AranyaTeamConfig *out,
                                                 struct AranyaExtError *__ext_err);

/**
 * Create a new graph/team with the current device as the owner.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 * @param __output the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_team(struct AranyaClient *client,
                               const struct AranyaTeamConfig *cfg,
                               struct AranyaTeamId *__output);

/**
 * Create a new graph/team with the current device as the owner.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 * @param __output the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_team_ext(struct AranyaClient *client,
                                   const struct AranyaTeamConfig *cfg,
                                   struct AranyaTeamId *__output,
                                   struct AranyaExtError *__ext_err);

/**
 * Add a team to the local device store.
 *
 * NOTE: this function is unfinished and will panic if called.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_team(struct AranyaClient *client,
                            const struct AranyaTeamId *team,
                            const struct AranyaTeamConfig *cfg);

/**
 * Add a team to the local device store.
 *
 * NOTE: this function is unfinished and will panic if called.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_team_ext(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                const struct AranyaTeamConfig *cfg,
                                struct AranyaExtError *__ext_err);

/**
 * Remove a team from the local device store.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_team(struct AranyaClient *client,
                               const struct AranyaTeamId *team);

/**
 * Remove a team from the local device store.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_team_ext(struct AranyaClient *client,
                                   const struct AranyaTeamId *team,
                                   struct AranyaExtError *__ext_err);

/**
 * Add the peer for automatic periodic Aranya state syncing.
 *
 * If a peer is not reachable on the network, sync errors
 * will appear in the tracing logs and
 * Aranya will be unable to sync state with that peer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 * @param config configuration values for syncing with a peer.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_sync_peer(struct AranyaClient *client,
                                 const struct AranyaTeamId *team,
                                 AranyaAddr addr,
                                 const struct AranyaSyncPeerConfig *config);

/**
 * Add the peer for automatic periodic Aranya state syncing.
 *
 * If a peer is not reachable on the network, sync errors
 * will appear in the tracing logs and
 * Aranya will be unable to sync state with that peer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 * @param config configuration values for syncing with a peer.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_sync_peer_ext(struct AranyaClient *client,
                                     const struct AranyaTeamId *team,
                                     AranyaAddr addr,
                                     const struct AranyaSyncPeerConfig *config,
                                     struct AranyaExtError *__ext_err);

/**
 * Sync with peer immediately.
 *
 * If a peer is not reachable on the network, sync errors
 * will appear in the tracing logs and
 * Aranya will be unable to sync state with that peer.
 *
 *
 * This function ignores [`aranya_sync_peer_config_builder_set_interval`](@ref aranya_sync_peer_config_builder_set_interval) and
 * [`aranya_sync_peer_config_builder_set_sync_later`](@ref aranya_sync_peer_config_builder_set_sync_later), if set.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 * @param config configuration values for syncing with a peer.
 * Default values for a sync config will be used if `config` is `NULL`
 * @relates AranyaClient.
 */
AranyaError aranya_sync_now(struct AranyaClient *client,
                            const struct AranyaTeamId *team,
                            AranyaAddr addr,
                            const struct AranyaSyncPeerConfig *config);

/**
 * Sync with peer immediately.
 *
 * If a peer is not reachable on the network, sync errors
 * will appear in the tracing logs and
 * Aranya will be unable to sync state with that peer.
 *
 *
 * This function ignores [`aranya_sync_peer_config_builder_set_interval`](@ref aranya_sync_peer_config_builder_set_interval) and
 * [`aranya_sync_peer_config_builder_set_sync_later`](@ref aranya_sync_peer_config_builder_set_sync_later), if set.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 * @param config configuration values for syncing with a peer.
 * Default values for a sync config will be used if `config` is `NULL`
 * @relates AranyaClient.
 */
AranyaError aranya_sync_now_ext(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                AranyaAddr addr,
                                const struct AranyaSyncPeerConfig *config,
                                struct AranyaExtError *__ext_err);

/**
 * Remove the peer from automatic Aranya state syncing.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_sync_peer(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    AranyaAddr addr);

/**
 * Remove the peer from automatic Aranya state syncing.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_sync_peer_ext(struct AranyaClient *client,
                                        const struct AranyaTeamId *team,
                                        AranyaAddr addr,
                                        struct AranyaExtError *__ext_err);

/**
 * Close the team and stop all operations on the graph.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_close_team(struct AranyaClient *client,
                              const struct AranyaTeamId *team);

/**
 * Close the team and stop all operations on the graph.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_close_team_ext(struct AranyaClient *client,
                                  const struct AranyaTeamId *team,
                                  struct AranyaExtError *__ext_err);

/**
 * Create a custom role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param name role name string [`AranyaRoleName`](@ref AranyaRoleName).
 *
 * Output params:
 * @param role returns the created role [`AranyaRole`](@ref AranyaRole).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_role(struct AranyaClient *client,
                               const struct AranyaTeamId *team,
                               AranyaRoleName name,
                               struct AranyaRole *role);

/**
 * Create a custom role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param name role name string [`AranyaRoleName`](@ref AranyaRoleName).
 *
 * Output params:
 * @param role returns the created role [`AranyaRole`](@ref AranyaRole).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_role_ext(struct AranyaClient *client,
                                   const struct AranyaTeamId *team,
                                   AranyaRoleName name,
                                   struct AranyaRole *role,
                                   struct AranyaExtError *__ext_err);

/**
 * Assign permission to execute an operation to a role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param role_id the role ID [`AranyaRoleId`](@ref AranyaRoleId) to assign an operation to.
 * @param op the operation to assign to the role [`AranyaOp`](@ref AranyaOp).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_operation_to_role(struct AranyaClient *client,
                                            const struct AranyaTeamId *team,
                                            const struct AranyaRoleId *role_id,
                                            AranyaOp op);

/**
 * Assign permission to execute an operation to a role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param role_id the role ID [`AranyaRoleId`](@ref AranyaRoleId) to assign an operation to.
 * @param op the operation to assign to the role [`AranyaOp`](@ref AranyaOp).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_operation_to_role_ext(struct AranyaClient *client,
                                                const struct AranyaTeamId *team,
                                                const struct AranyaRoleId *role_id,
                                                AranyaOp op,
                                                struct AranyaExtError *__ext_err);

/**
 * Revoke role operation.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param role_id the role ID [`AranyaRoleId`](@ref AranyaRoleId) to revoke an operation from.
 * @param op the operation to revoke from the role [`AranyaOp`](@ref AranyaOp).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_role_operation(struct AranyaClient *client,
                                         const struct AranyaTeamId *team,
                                         const struct AranyaRoleId *role_id,
                                         AranyaOp op);

/**
 * Revoke role operation.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param role_id the role ID [`AranyaRoleId`](@ref AranyaRoleId) to revoke an operation from.
 * @param op the operation to revoke from the role [`AranyaOp`](@ref AranyaOp).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_role_operation_ext(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaRoleId *role_id,
                                             AranyaOp op,
                                             struct AranyaExtError *__ext_err);

/**
 * Setup default roles on team.
 *
 * This sets up the admin, operator, and member roles with default permissions as defined in the Aranya policy.
 * The caller should invoke this method right after team creation in order to use default RBAC from the policy.
 * If this method is not invoked, the application must manually create roles and assign permissions to them.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_setup_default_roles(struct AranyaClient *client,
                                       const struct AranyaTeamId *team,
                                       struct AranyaRole *roles,
                                       size_t *roles_len);

/**
 * Setup default roles on team.
 *
 * This sets up the admin, operator, and member roles with default permissions as defined in the Aranya policy.
 * The caller should invoke this method right after team creation in order to use default RBAC from the policy.
 * If this method is not invoked, the application must manually create roles and assign permissions to them.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_setup_default_roles_ext(struct AranyaClient *client,
                                           const struct AranyaTeamId *team,
                                           struct AranyaRole *roles,
                                           size_t *roles_len,
                                           struct AranyaExtError *__ext_err);

/**
 * Add a device to the team with the default role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param precedence is the device's precedence [`AranyaDevicePrecedence`](@ref AranyaDevicePrecedence).
 * @param keybundle serialized keybundle byte buffer `KeyBundle`.
 * @param keybundle_len is the length of the serialized keybundle.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_device_to_team(struct AranyaClient *client,
                                      const struct AranyaTeamId *team,
                                      const AranyaDevicePrecedence *precedence,
                                      const uint8_t *keybundle,
                                      size_t keybundle_len);

/**
 * Add a device to the team with the default role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param precedence is the device's precedence [`AranyaDevicePrecedence`](@ref AranyaDevicePrecedence).
 * @param keybundle serialized keybundle byte buffer `KeyBundle`.
 * @param keybundle_len is the length of the serialized keybundle.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_device_to_team_ext(struct AranyaClient *client,
                                          const struct AranyaTeamId *team,
                                          const AranyaDevicePrecedence *precedence,
                                          const uint8_t *keybundle,
                                          size_t keybundle_len,
                                          struct AranyaExtError *__ext_err);

/**
 * Remove a device from the team.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_device_from_team(struct AranyaClient *client,
                                           const struct AranyaTeamId *team,
                                           const struct AranyaDeviceId *device);

/**
 * Remove a device from the team.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_device_from_team_ext(struct AranyaClient *client,
                                               const struct AranyaTeamId *team,
                                               const struct AranyaDeviceId *device,
                                               struct AranyaExtError *__ext_err);

/**
 * Assign device precedence.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param precedence is the device's precedence [`AranyaDevicePrecedence`](@ref AranyaDevicePrecedence).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_device_precedence(struct AranyaClient *client,
                                            const struct AranyaTeamId *team,
                                            const struct AranyaDeviceId *device,
                                            const AranyaDevicePrecedence *precedence);

/**
 * Assign device precedence.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param precedence is the device's precedence [`AranyaDevicePrecedence`](@ref AranyaDevicePrecedence).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_device_precedence_ext(struct AranyaClient *client,
                                                const struct AranyaTeamId *team,
                                                const struct AranyaDeviceId *device,
                                                const AranyaDevicePrecedence *precedence,
                                                struct AranyaExtError *__ext_err);

/**
 * Assign a role to a device.
 *
 * This will change the device's current role to the new role assigned.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to assign to the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_role(struct AranyaClient *client,
                               const struct AranyaTeamId *team,
                               const struct AranyaDeviceId *device,
                               const struct AranyaRoleId *role);

/**
 * Assign a role to a device.
 *
 * This will change the device's current role to the new role assigned.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to assign to the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_role_ext(struct AranyaClient *client,
                                   const struct AranyaTeamId *team,
                                   const struct AranyaDeviceId *device,
                                   const struct AranyaRoleId *role,
                                   struct AranyaExtError *__ext_err);

/**
 * Revoke a role from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to revoke from the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_role(struct AranyaClient *client,
                               const struct AranyaTeamId *team,
                               const struct AranyaDeviceId *device,
                               const struct AranyaRoleId *role);

/**
 * Revoke a role from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to revoke from the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_role_ext(struct AranyaClient *client,
                                   const struct AranyaTeamId *team,
                                   const struct AranyaDeviceId *device,
                                   const struct AranyaRoleId *role,
                                   struct AranyaExtError *__ext_err);

/**
 * Associate a network identifier to a device for use with AQC.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * If the address already exists for this device, it is replaced with the new address. Capable
 * of resolving addresses via DNS, required to be statically mapped to IPV4. For use with
 * OpenChannel and receiving messages. Can take either DNS name or IPV4.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_assign_net_identifier(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaDeviceId *device,
                                             AranyaNetIdentifier net_identifier);

/**
 * Associate a network identifier to a device for use with AQC.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * If the address already exists for this device, it is replaced with the new address. Capable
 * of resolving addresses via DNS, required to be statically mapped to IPV4. For use with
 * OpenChannel and receiving messages. Can take either DNS name or IPV4.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_assign_net_identifier_ext(struct AranyaClient *client,
                                                 const struct AranyaTeamId *team,
                                                 const struct AranyaDeviceId *device,
                                                 AranyaNetIdentifier net_identifier,
                                                 struct AranyaExtError *__ext_err);

/**
 * Disassociate an AQC network identifier from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_remove_net_identifier(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaDeviceId *device,
                                             AranyaNetIdentifier net_identifier);

/**
 * Disassociate an AQC network identifier from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_remove_net_identifier_ext(struct AranyaClient *client,
                                                 const struct AranyaTeamId *team,
                                                 const struct AranyaDeviceId *device,
                                                 AranyaNetIdentifier net_identifier,
                                                 struct AranyaExtError *__ext_err);

/**
 * Create a channel label.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param name label name string [`AranyaLabelName`](@ref AranyaLabelName).
 * Output params:
 * @param role returns the created label [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_label(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                AranyaLabelName name,
                                struct AranyaLabel *label);

/**
 * Create a channel label.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param name label name string [`AranyaLabelName`](@ref AranyaLabelName).
 * Output params:
 * @param role returns the created label [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_label_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    AranyaLabelName name,
                                    struct AranyaLabel *label,
                                    struct AranyaExtError *__ext_err);

/**
 * Get ID of role.
 *
 * @param role the role [`AranyaRole`](@ref AranyaRole).
 *
 * Returns the role's ID [`AranyaRoleId`](@ref AranyaRoleId).
 */
AranyaError aranya_role_get_id(const struct AranyaRole *role,
                               struct AranyaRoleId *__output);

/**
 * Get ID of role.
 *
 * @param role the role [`AranyaRole`](@ref AranyaRole).
 *
 * Returns the role's ID [`AranyaRoleId`](@ref AranyaRoleId).
 */
AranyaError aranya_role_get_id_ext(const struct AranyaRole *role,
                                   struct AranyaRoleId *__output,
                                   struct AranyaExtError *__ext_err);

/**
 * Get name of role.
 *
 * @param role the role [`AranyaRole`](@ref AranyaRole).
 *
 * Returns a C string pointer to the role's name.
 */
AranyaError aranya_role_get_name(const struct AranyaRole *role,
                                 const char **__output);

/**
 * Cleanup dynamically allocated strings in role.
 *
 * @param role the role [`AranyaRole`](@ref AranyaRole).
 */
AranyaError aranya_role_cleanup(struct AranyaRole *role);

/**
 * Cleanup dynamically allocated strings in role.
 *
 * @param role the role [`AranyaRole`](@ref AranyaRole).
 */
AranyaError aranya_role_cleanup_ext(struct AranyaRole *role,
                                    struct AranyaExtError *__ext_err);

/**
 * Get ID of label.
 *
 * @param label the label [`AranyaLabel`](@ref AranyaLabel).
 *
 * Returns the label's ID [`AranyaLabelId`](@ref AranyaLabelId).
 */
AranyaError aranya_label_get_id(const struct AranyaLabel *label,
                                struct AranyaLabelId *__output);

/**
 * Get ID of label.
 *
 * @param label the label [`AranyaLabel`](@ref AranyaLabel).
 *
 * Returns the label's ID [`AranyaLabelId`](@ref AranyaLabelId).
 */
AranyaError aranya_label_get_id_ext(const struct AranyaLabel *label,
                                    struct AranyaLabelId *__output,
                                    struct AranyaExtError *__ext_err);

/**
 * Get name of label.
 *
 * @param label the label [`AranyaLabel`](@ref AranyaLabel).
 *
 * Returns a C string pointer to the label's name.
 */
AranyaError aranya_label_get_name(const struct AranyaLabel *label,
                                  const char **__output);

/**
 * Cleanup dynamically allocated strings in label.
 *
 * @param label the label [`AranyaLabel`](@ref AranyaLabel).
 */
AranyaError aranya_label_cleanup(struct AranyaLabel *label);

/**
 * Cleanup dynamically allocated strings in label.
 *
 * @param label the label [`AranyaLabel`](@ref AranyaLabel).
 */
AranyaError aranya_label_cleanup_ext(struct AranyaLabel *label,
                                     struct AranyaExtError *__ext_err);

/**
 * Get enum value of operation.
 *
 * Returns the enum representation of the operation.
 */
AranyaError aranya_op_get_enum(const struct AranyaOperation *op,
                               AranyaOp *__output);

/**
 * Writes `Op` to `str`.
 *
 * To always succeed, `str` must be large enough to contain the operation string.
 *
 * @param op the operation [`AranyaOp`](@ref AranyaOp).
 * @param str Op string [`AranyaId`](@ref AranyaId).
 * @param str_len returns the length of `str`
 *
 * @relates AranyaId.
 */
AranyaError aranya_op_to_str(const struct AranyaOperation *op,
                             char *str,
                             size_t *str_len);

/**
 * Assign a label to a device so that it can be used for a channel.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to assign the label to.
 * @param label_id the AQC channel label ID [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_label(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                const struct AranyaDeviceId *device,
                                const struct AranyaLabelId *label_id,
                                AranyaChanOp op);

/**
 * Assign a label to a device so that it can be used for a channel.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to assign the label to.
 * @param label_id the AQC channel label ID [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_label_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    const struct AranyaDeviceId *device,
                                    const struct AranyaLabelId *label_id,
                                    AranyaChanOp op,
                                    struct AranyaExtError *__ext_err);

/**
 * Revoke a label from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to revoke the label from.
 * @param label_id the AQC channel label ID [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_label(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                const struct AranyaDeviceId *device,
                                const struct AranyaLabelId *label_id);

/**
 * Revoke a label from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to revoke the label from.
 * @param label_id the AQC channel label ID [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_label_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    const struct AranyaDeviceId *device,
                                    const struct AranyaLabelId *label_id,
                                    struct AranyaExtError *__ext_err);

/**
 * Create an AQC channel.
 *
 * Creates a bidirectional AQC channel between the current device
 * and another peer.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param peer the peer's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 * @param label_id the AQC channel label ID [`AranyaLabelId`](@ref AranyaLabelId) to create the channel with.
 * @param __output the AQC channel's ID [`AranyaAqcBidiChannelId`](@ref AranyaAqcBidiChannelId)
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_create_bidi_channel(struct AranyaClient *client,
                                           const struct AranyaTeamId *team,
                                           AranyaNetIdentifier peer,
                                           const struct AranyaLabelId *label_id,
                                           struct AranyaAqcBidiChannelId *__output);

/**
 * Create an AQC channel.
 *
 * Creates a bidirectional AQC channel between the current device
 * and another peer.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param peer the peer's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 * @param label_id the AQC channel label ID [`AranyaLabelId`](@ref AranyaLabelId) to create the channel with.
 * @param __output the AQC channel's ID [`AranyaAqcBidiChannelId`](@ref AranyaAqcBidiChannelId)
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_create_bidi_channel_ext(struct AranyaClient *client,
                                               const struct AranyaTeamId *team,
                                               AranyaNetIdentifier peer,
                                               const struct AranyaLabelId *label_id,
                                               struct AranyaAqcBidiChannelId *__output,
                                               struct AranyaExtError *__ext_err);

/**
 * Delete a bidirectional AQC channel.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AQC channel ID [`AranyaAqcBidiChannelId`](@ref AranyaAqcBidiChannelId) of the channel to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_delete_bidi_channel(struct AranyaClient *client,
                                           const struct AranyaAqcBidiChannelId *chan);

/**
 * Delete a bidirectional AQC channel.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AQC channel ID [`AranyaAqcBidiChannelId`](@ref AranyaAqcBidiChannelId) of the channel to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_delete_bidi_channel_ext(struct AranyaClient *client,
                                               const struct AranyaAqcBidiChannelId *chan,
                                               struct AranyaExtError *__ext_err);

/**
 * Delete a unidirectional AQC channel.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AQC channel ID [`AranyaAqcUniChannelId`](@ref AranyaAqcUniChannelId) of the channel to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_delete_uni_channel(struct AranyaClient *client,
                                          const struct AranyaAqcUniChannelId *chan);

/**
 * Delete a unidirectional AQC channel.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AQC channel ID [`AranyaAqcUniChannelId`](@ref AranyaAqcUniChannelId) of the channel to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_delete_uni_channel_ext(struct AranyaClient *client,
                                              const struct AranyaAqcUniChannelId *chan,
                                              struct AranyaExtError *__ext_err);

/**
 * Configures how often the peer will be synced with.
 *
 * By default, the interval is not set. It is an error to call
 * [`aranya_sync_peer_config_builder_build`](@ref aranya_sync_peer_config_builder_build) before setting the interval with
 * this function
 *
 * @param cfg a pointer to the builder for a sync config
 * @param interval Set the interval at which syncing occurs
 */
AranyaError aranya_sync_peer_config_builder_set_interval(struct AranyaSyncPeerConfigBuilder *cfg,
                                                         AranyaDuration interval);

/**
 * Configures how often the peer will be synced with.
 *
 * By default, the interval is not set. It is an error to call
 * [`aranya_sync_peer_config_builder_build`](@ref aranya_sync_peer_config_builder_build) before setting the interval with
 * this function
 *
 * @param cfg a pointer to the builder for a sync config
 * @param interval Set the interval at which syncing occurs
 */
AranyaError aranya_sync_peer_config_builder_set_interval_ext(struct AranyaSyncPeerConfigBuilder *cfg,
                                                             AranyaDuration interval,
                                                             struct AranyaExtError *__ext_err);

/**
 * Updates the config to enable immediate syncing with the peer.
 *
 * Overrides [`aranya_sync_peer_config_builder_set_sync_later`](@ref aranya_sync_peer_config_builder_set_sync_later) if invoked afterward.
 *
 * By default, the peer is synced with immediately.
 *
 * @param cfg a pointer to the builder for a sync config
 */
AranyaError aranya_sync_peer_config_builder_set_sync_now(struct AranyaSyncPeerConfigBuilder *cfg);

/**
 * Updates the config to enable immediate syncing with the peer.
 *
 * Overrides [`aranya_sync_peer_config_builder_set_sync_later`](@ref aranya_sync_peer_config_builder_set_sync_later) if invoked afterward.
 *
 * By default, the peer is synced with immediately.
 *
 * @param cfg a pointer to the builder for a sync config
 */
AranyaError aranya_sync_peer_config_builder_set_sync_now_ext(struct AranyaSyncPeerConfigBuilder *cfg,
                                                             struct AranyaExtError *__ext_err);

/**
 * Updates the config to disable immediate syncing with the peer.
 *
 * Overrides [`aranya_sync_peer_config_builder_set_sync_now`](@ref aranya_sync_peer_config_builder_set_sync_now) if invoked afterward.
 *
 * By default, the peer is synced with immediately.
 * @param cfg a pointer to the builder for a sync config
 */
AranyaError aranya_sync_peer_config_builder_set_sync_later(struct AranyaSyncPeerConfigBuilder *cfg);

/**
 * Updates the config to disable immediate syncing with the peer.
 *
 * Overrides [`aranya_sync_peer_config_builder_set_sync_now`](@ref aranya_sync_peer_config_builder_set_sync_now) if invoked afterward.
 *
 * By default, the peer is synced with immediately.
 * @param cfg a pointer to the builder for a sync config
 */
AranyaError aranya_sync_peer_config_builder_set_sync_later_ext(struct AranyaSyncPeerConfigBuilder *cfg,
                                                               struct AranyaExtError *__ext_err);

/**
 * Build a sync config from a sync config builder
 *
 * @param cfg a pointer to the builder for a sync config
 */
AranyaError aranya_sync_peer_config_builder_build(const struct AranyaSyncPeerConfigBuilder *cfg,
                                                  struct AranyaSyncPeerConfig *out);

/**
 * Build a sync config from a sync config builder
 *
 * @param cfg a pointer to the builder for a sync config
 */
AranyaError aranya_sync_peer_config_builder_build_ext(const struct AranyaSyncPeerConfigBuilder *cfg,
                                                      struct AranyaSyncPeerConfig *out,
                                                      struct AranyaExtError *__ext_err);

/**
 * Query devices on team.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param devices returns a list of device IDs on the team [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param devices_len returns the length of the devices list [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_devices_on_team(struct AranyaClient *client,
                                         const struct AranyaTeamId *team,
                                         struct AranyaDeviceId *devices,
                                         size_t *devices_len);

/**
 * Query devices on team.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param devices returns a list of device IDs on the team [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param devices_len returns the length of the devices list [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_devices_on_team_ext(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             struct AranyaDeviceId *devices,
                                             size_t *devices_len,
                                             struct AranyaExtError *__ext_err);

/**
 * Writes the human-readable encoding of `id` to `str`.
 *
 * To always succeed, `str` must be at least `ARANYA_ID_STR_LEN` bytes long.
 *
 * @param device ID [`AranyaId`](@ref AranyaId).
 * @param str ID string [`AranyaId`](@ref AranyaId).
 * @param str_len returns the length of `str`
 *
 * @relates AranyaId.
 */
AranyaError aranya_id_to_str(const struct AranyaId *id,
                             char *str,
                             size_t *str_len);

/**
 * Decodes `str` into an [`AranyaId`](@ref AranyaId).
 *
 *
 * @param str pointer to a null-terminated string.
 *
 * @relates AranyaId.
 */
AranyaError aranya_id_from_str(const char *str, struct AranyaId *__output);

/**
 * Query device's keybundle.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param keybundle keybundle byte buffer `KeyBundle`.
 * @param keybundle_len returns the length of the serialized keybundle.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_keybundle(struct AranyaClient *client,
                                          const struct AranyaTeamId *team,
                                          const struct AranyaDeviceId *device,
                                          uint8_t *keybundle,
                                          size_t *keybundle_len);

/**
 * Query device's keybundle.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param keybundle keybundle byte buffer `KeyBundle`.
 * @param keybundle_len returns the length of the serialized keybundle.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_keybundle_ext(struct AranyaClient *client,
                                              const struct AranyaTeamId *team,
                                              const struct AranyaDeviceId *device,
                                              uint8_t *keybundle,
                                              size_t *keybundle_len,
                                              struct AranyaExtError *__ext_err);

/**
 * Query device label assignments.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the labels.
 * Writes the number of labels that would have been returned to `labels_len`.
 * The application can use `labels_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * Output params:
 * @param labels returns a list of labels assigned to the device [`AranyaLabelId`](@ref AranyaLabelId).
 * @param labels_len returns the length of the labels list [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_label_assignments(struct AranyaClient *client,
                                                  const struct AranyaTeamId *team,
                                                  const struct AranyaDeviceId *device,
                                                  struct AranyaLabel *labels,
                                                  size_t *labels_len);

/**
 * Query device label assignments.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the labels.
 * Writes the number of labels that would have been returned to `labels_len`.
 * The application can use `labels_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * Output params:
 * @param labels returns a list of labels assigned to the device [`AranyaLabelId`](@ref AranyaLabelId).
 * @param labels_len returns the length of the labels list [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_label_assignments_ext(struct AranyaClient *client,
                                                      const struct AranyaTeamId *team,
                                                      const struct AranyaDeviceId *device,
                                                      struct AranyaLabel *labels,
                                                      size_t *labels_len,
                                                      struct AranyaExtError *__ext_err);

/**
 * Query device's AQC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param network identifier string [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_aqc_net_identifier(struct AranyaClient *client,
                                            const struct AranyaTeamId *team,
                                            const struct AranyaDeviceId *device,
                                            char *ident,
                                            size_t *ident_len,
                                            bool *__output);

/**
 * Query device's AQC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param network identifier string [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_aqc_net_identifier_ext(struct AranyaClient *client,
                                                const struct AranyaTeamId *team,
                                                const struct AranyaDeviceId *device,
                                                char *ident,
                                                size_t *ident_len,
                                                bool *__output,
                                                struct AranyaExtError *__ext_err);

/**
 * Query if a label exists.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param label the label [`AranyaLabelId`](@ref AranyaLabelId).
 * @param __output boolean indicating whether the label exists.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_label_exists(struct AranyaClient *client,
                                      const struct AranyaTeamId *team,
                                      const struct AranyaLabelId *label,
                                      bool *__output);

/**
 * Query if a label exists.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param label the label [`AranyaLabelId`](@ref AranyaLabelId).
 * @param __output boolean indicating whether the label exists.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_label_exists_ext(struct AranyaClient *client,
                                          const struct AranyaTeamId *team,
                                          const struct AranyaLabelId *label,
                                          bool *__output,
                                          struct AranyaExtError *__ext_err);

/**
 * Query for list of existing labels.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the labels.
 * Writes the number of labels that would have been returned to `labels_len`.
 * The application can use `labels_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * Output params:
 * @param labels returns a list of labels [`AranyaLabelId`](@ref AranyaLabelId).
 * @param labels_len returns the length of the labels list [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_labels(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                struct AranyaLabel *labels,
                                size_t *labels_len);

/**
 * Query for list of existing labels.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the labels.
 * Writes the number of labels that would have been returned to `labels_len`.
 * The application can use `labels_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * Output params:
 * @param labels returns a list of labels [`AranyaLabelId`](@ref AranyaLabelId).
 * @param labels_len returns the length of the labels list [`AranyaLabelId`](@ref AranyaLabelId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_labels_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    struct AranyaLabel *labels,
                                    size_t *labels_len,
                                    struct AranyaExtError *__ext_err);

/**
 * Query for list of roles on team.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the roles.
 * Writes the number of roles that would have been returned to `roles_len`.
 * The application can use `roles_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * Output params:
 * @param roles returns a list of roles [`AranyaRole`](@ref AranyaRole).
 * @param roles_len returns the length of the roles list [`AranyaRole`](@ref AranyaRole).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_roles_on_team(struct AranyaClient *client,
                                       const struct AranyaTeamId *team,
                                       struct AranyaRole *roles,
                                       size_t *roles_len);

/**
 * Query for list of roles on team.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the roles.
 * Writes the number of roles that would have been returned to `roles_len`.
 * The application can use `roles_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * Output params:
 * @param roles returns a list of roles [`AranyaRole`](@ref AranyaRole).
 * @param roles_len returns the length of the roles list [`AranyaRole`](@ref AranyaRole).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_roles_on_team_ext(struct AranyaClient *client,
                                           const struct AranyaTeamId *team,
                                           struct AranyaRole *roles,
                                           size_t *roles_len,
                                           struct AranyaExtError *__ext_err);

/**
 * Query for list of roles assigned to a device.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the roles.
 * Writes the number of roles that would have been returned to `roles_len`.
 * The application can use `roles_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * Output params:
 * @param roles returns a list of roles [`AranyaRoleId`](@ref AranyaRoleId).
 * @param roles_len returns the length of the roles list [`AranyaRoleId`](@ref AranyaRoleId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_roles(struct AranyaClient *client,
                                      const struct AranyaTeamId *team,
                                      const struct AranyaDeviceId *device,
                                      struct AranyaRole *roles,
                                      size_t *roles_len);

/**
 * Query for list of roles assigned to a device.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the roles.
 * Writes the number of roles that would have been returned to `roles_len`.
 * The application can use `roles_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * Output params:
 * @param roles returns a list of roles [`AranyaRoleId`](@ref AranyaRoleId).
 * @param roles_len returns the length of the roles list [`AranyaRoleId`](@ref AranyaRoleId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_roles_ext(struct AranyaClient *client,
                                          const struct AranyaTeamId *team,
                                          const struct AranyaDeviceId *device,
                                          struct AranyaRole *roles,
                                          size_t *roles_len,
                                          struct AranyaExtError *__ext_err);

/**
 * Query for list of operations assigned to the role.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the operations.
 * Writes the number of roles that would have been returned to `op_len`.
 * The application can use `op_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param role the role's ID [`AranyaRoleId`](@ref AranyaRoleId).
 *
 * Output params:
 * @param ops returns a list of operations [`AranyaOp`](@ref AranyaOp).
 * @param ops_len returns the length of the operations list [`AranyaRoleId`](@ref AranyaRoleId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_role_operations(struct AranyaClient *client,
                                         const struct AranyaTeamId *team,
                                         const struct AranyaRoleId *role,
                                         struct AranyaOperation *ops,
                                         size_t *ops_len);

/**
 * Query for list of operations assigned to the role.
 *
 * Returns an `AranyaBufferTooSmall` error if the output buffer is too small to hold the operations.
 * Writes the number of roles that would have been returned to `op_len`.
 * The application can use `op_len` to allocate a larger buffer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param role the role's ID [`AranyaRoleId`](@ref AranyaRoleId).
 *
 * Output params:
 * @param ops returns a list of operations [`AranyaOp`](@ref AranyaOp).
 * @param ops_len returns the length of the operations list [`AranyaRoleId`](@ref AranyaRoleId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_role_operations_ext(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaRoleId *role,
                                             struct AranyaOperation *ops,
                                             size_t *ops_len,
                                             struct AranyaExtError *__ext_err);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* ARANYA_CLIENT_H */


