/*
 * Copyright (c) SpiderOak, Inc. All rights reserved.
 */
/**
 * @file aranya-client.h
 * @brief External header file containing C function definitions
 * for the Aranya client library.
 */
 

#ifndef ARANYA_CLIENT_H
#define ARANYA_CLIENT_H

#pragma once

/* Code generated by `capi`. DO NOT EDIT. */

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <sys/socket.h>

#ifndef __has_attribute
    #define __has_attribute(x) 0
#endif /* __has_attribute */

#if !defined(ARANYA_ALIGNED)
    #if __has_attribute(aligned)
        #define ARANYA_ALIGNED(n) __attribute__((aligned(n)))
    #else
        #error "compiler must support `aligned` attribute"
    #endif
#endif /* ARANYA_ALIGNED */

#if !defined(ARANYA_DESIGNATED_INIT)
    #if __has_attribute(designated_init)
        #define ARANYA_DESIGNATED_INIT __attribute__((designated_init))
    #else
        #define ARANYA_DESIGNATED_INIT
    #endif
#endif /* ARANYA_DESIGNATED_INIT */

#if !defined(ARANYA_MUST_USE)
    #if __has_attribute(warn_unused_result)
        #define ARANYA_MUST_USE __attribute__((warn_unused_result))
    #else
        #define ARANYA_MUST_USE
    #endif
#endif /* ARANYA_MUST_USE */

#if !defined(ARANYA_NO_RETURN)
    #if __has_attribute(noreturn)
        #define ARANYA_NO_RETURN __attribute__((noreturn))
    #else
        #define ARANYA_NO_RETURN
    #endif
#endif /* ARANYA_NO_RETURN */

#if !defined(ARANYA_NON_NULL)
    #if defined(__gnu__)
        #if __has_attribute(nonnull)
            #define ARANYA_NON_NULL __attribute__((nonnull))
        #endif
    #elif defined(__clang__)
        #define ARANYA_NON_NULL _Nonnull
    #else
        #define ARANYA_NON_NULL
    #endif
#endif /* ARANYA_NON_NULL */

#if !defined(ARANYA_PACKED)
    #if __has_attribute(packed)
        #define ARANYA_PACKED __attribute__((packed))
    #else
        #define ARANYA_PACKED
    #endif
#endif /* ARANYA_PACKED */


#define ARANYA_DURATION_SECONDS (1000 * ARANYA_DURATION_MILLISECONDS)

#define ARANYA_DURATION_MILLISECONDS (1000 * ARANYA_DURATION_MICROSECONDS)

#define ARANYA_DURATION_MICROSECONDS (1000 * ARANYA_DURATION_NANOSECONDS)

#define ARANYA_DURATION_NANOSECONDS 1

/**
 * The current version of [`TeamConfig`].
 */
#define TEAM_CONFIG_VERSION 1

/**
 * The size in bytes of a `DeviceId` converted to a human-readable base64 string.
 */
#define ARANYA_DEVICE_ID_STR_LEN (((64 * 1375) / 1000) + 1)

/**
 * An error code.
 *
 * For extended error information, see [`AranyaExtError`](@ref AranyaExtError).
 */
enum AranyaError
#ifdef __cplusplus
  : uint32_t
#endif // __cplusplus
 {
    /**
     * Success.
     */
    ARANYA_ERROR_SUCCESS,
    /**
     * Internal bug discovered.
     */
    ARANYA_ERROR_BUG,
    /**
     * Timed out.
     */
    ARANYA_ERROR_TIMEOUT,
    /**
     * Logging initialization failure.
     */
    ARANYA_ERROR_LOG_INIT,
    /**
     * Invalid argument.
     */
    ARANYA_ERROR_INVALID_ARGUMENT,
    /**
     * Buffer is too small.
     */
    ARANYA_ERROR_BUFFER_TOO_SMALL,
    /**
     * Invalid UTF-8.
     */
    ARANYA_ERROR_INVALID_UTF8,
    /**
     * Invalid Address.
     */
    ARANYA_ERROR_INVALID_ADDR,
    /**
     * Error connecting to daemon.
     */
    ARANYA_ERROR_CONNECTING,
    /**
     * Could not send request to daemon.
     */
    ARANYA_ERROR_RPC,
    /**
     * Daemon reported error.
     */
    ARANYA_ERROR_DAEMON,
    /**
     * AFC library error.
     */
    ARANYA_ERROR_AFC,
    ARANYA_ERROR_RUNTIME,
    ARANYA_ERROR_INVALID_INDEX,
    ARANYA_ERROR_CONFIG,
};
#ifndef __cplusplus
typedef uint32_t AranyaError;
#endif // __cplusplus

/**
 * An enum containing team roles defined in the Aranya policy.
 */
enum AranyaRole
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
    /**
     * Owner role.
     */
    ARANYA_ROLE_OWNER,
    /**
     * Admin role.
     */
    ARANYA_ROLE_ADMIN,
    /**
     * Operator role.
     */
    ARANYA_ROLE_OPERATOR,
    /**
     * Member role.
     */
    ARANYA_ROLE_MEMBER,
};
#ifndef __cplusplus
typedef uint8_t AranyaRole;
#endif // __cplusplus

/**
 * Extended error information.
 */
typedef struct ARANYA_ALIGNED(8) AranyaExtError {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[80];
} AranyaExtError;

/**
 * A handle to an Aranya Client.
 */
typedef struct ARANYA_ALIGNED(16) AranyaClient {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[2656];
} AranyaClient;

#if defined(ENABLE_AFC)
/**
 * Configuration info builder for Aranya Fast Channels.
 */
typedef struct ARANYA_ALIGNED(8) AranyaAfcConfigBuilder {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[24];
} AranyaAfcConfigBuilder;
#endif

#if defined(ENABLE_AFC)
/**
 * Configuration info for Aranya Fast Channels.
 */
typedef struct ARANYA_ALIGNED(8) AranyaAfcConfig {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[40];
} AranyaAfcConfig;
#endif

/**
 * Configuration info builder for Aranya.
 */
typedef struct ARANYA_ALIGNED(8) AranyaClientConfigBuilder {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[40];
} AranyaClientConfigBuilder;

/**
 * Configuration info for Aranya.
 */
typedef struct ARANYA_ALIGNED(8) AranyaClientConfig {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[48];
} AranyaClientConfig;

/**
 * Public Key bundle for a device.
 */
typedef struct ARANYA_DESIGNATED_INIT AranyaKeyBundle {
    /**
     * Public identity key.
     */
    const uint8_t *ident_key;
    /**
     * Public identity key length.
     */
    size_t ident_key_len;
    /**
     * Public signing key.
     */
    const uint8_t *sign_key;
    /**
     * Public signing key length.
     */
    size_t sign_key_len;
    /**
     * Public encryption key.
     */
    const uint8_t *enc_key;
    /**
     * Public encryption key length.
     */
    size_t enc_key_len;
} AranyaKeyBundle;

/**
 * Device ID.
 */
typedef struct ARANYA_ALIGNED(1) AranyaDeviceId {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[64];
} AranyaDeviceId;

typedef struct ARANYA_ALIGNED(4) AranyaTeamConfigBuilder {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[4];
} AranyaTeamConfigBuilder;

typedef struct ARANYA_ALIGNED(8) AranyaTeamConfig {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[24];
} AranyaTeamConfig;

/**
 * Team ID.
 */
typedef struct ARANYA_ALIGNED(1) AranyaTeamId {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[64];
} AranyaTeamId;

/**
 * A network socket address for an Aranya client.
 *
 * E.g. "localhost:8080", "127.0.0.1:8080"
 */
typedef const char *AranyaAddr;

/**
 * A type to represent a span of time.
 */
typedef uint64_t AranyaDuration;

/**
 * A network identifier for an Aranya client.
 *
 * E.g. "localhost:8080", "127.0.0.1:8080"
 */
typedef const char *AranyaNetIdentifier;

/**
 * An AFC label.
 *
 * It identifies the policy rules that govern the AFC channel.
 */
typedef uint32_t AranyaLabel;

#if defined(ENABLE_AFC)
/**
 * Channel ID for a fast channel.
 */
typedef struct ARANYA_ALIGNED(1) AranyaChannelId {
    /**
     * This field only exists for size purposes. It is
     * UNDEFINED BEHAVIOR to read from or write to it.
     * @private
     */
    uint8_t __for_size_only[16];
} AranyaChannelId;
#endif

#if defined(ENABLE_AFC)
/**
 * Network socket address.
 */
typedef struct sockaddr_storage AranyaSocketAddr;
#endif

#if defined(ENABLE_AFC)
/**
 * Aranya Fast Channels (AFC) message info.
 */
typedef struct AranyaAfcMsgInfo {
    /**
     * Uniquely (globally) identifies the channel.
     */
    struct AranyaChannelId channel;
    /**
     * The label applied to the channel.
     */
    AranyaLabel label;
    /**
     * Identifies the position of the message in the channel.
     *
     * This can be used to sort out-of-order messages.
     */
    uint64_t seq;
    /**
     * Peer's network socket address.
     */
    AranyaSocketAddr addr;
} AranyaAfcMsgInfo;
#endif

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Returns a human-readable error message for an [`AranyaError`](@ref AranyaError).
 *
 * The resulting pointer must NOT be freed.
 *
 * @param err `u32` error code from `AranyaError`.
 *
 * @relates AranyaError.
 */
const char *aranya_error_to_str(uint32_t err);

/**
 * Initializes `AranyaExtError`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_init(struct AranyaExtError *out);

/**
 * Initializes `AranyaExtError`.
 *
 * When no longer needed, `out`'s resources must be released
 * with its cleanup routine.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_init_ext(struct AranyaExtError *out,
                                      struct AranyaExtError *__ext_err);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_ext_error_init`.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_cleanup(struct AranyaExtError *ptr);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_ext_error_init`.
 *
 * @relates AranyaExtError
 */
AranyaError aranya_ext_error_cleanup_ext(struct AranyaExtError *ptr,
                                         struct AranyaExtError *__ext_err);

/**
 * Copies the extended error's message into `msg`.
 *
 * If `msg_len` is large enough to fit the entire message,
 * including the trailing null byte, it updates `msg_len`
 * with the length of the message and copies the message
 * into `msg`.
 *
 * Otherwise, if `msg_len` is not large enough to fit the
 * entire message, including the trailing null byte, it
 * updates `msg_len` with the length of the message and
 * returns `::ARANYA_ERROR_BUFFER_TOO_SMALL`.
 *
 * @param err the error to get a message for [`AranyaExtError`](@ref AranyaExtError).
 * @param msg buffer to copy error message into.
 * @param msg_len length of the message buffer.
 *
 * @relates AranyaExtError.
 */
AranyaError aranya_ext_error_msg(const struct AranyaExtError *err,
                                 char *msg,
                                 size_t *msg_len);

/**
 * Copies the extended error's message into `msg`.
 *
 * If `msg_len` is large enough to fit the entire message,
 * including the trailing null byte, it updates `msg_len`
 * with the length of the message and copies the message
 * into `msg`.
 *
 * Otherwise, if `msg_len` is not large enough to fit the
 * entire message, including the trailing null byte, it
 * updates `msg_len` with the length of the message and
 * returns `::ARANYA_ERROR_BUFFER_TOO_SMALL`.
 *
 * @param err the error to get a message for [`AranyaExtError`](@ref AranyaExtError).
 * @param msg buffer to copy error message into.
 * @param msg_len length of the message buffer.
 *
 * @relates AranyaExtError.
 */
AranyaError aranya_ext_error_msg_ext(const struct AranyaExtError *err,
                                     char *msg,
                                     size_t *msg_len,
                                     struct AranyaExtError *__ext_err);

/**
 * Initializes logging.
 *
 * Assumes the `ARANYA_CAPI` environment variable has been set to the desired tracing log level.
 * E.g. `ARANYA_CAPI=debug`.
 */
AranyaError aranya_init_logging(void);

/**
 * Initializes logging.
 *
 * Assumes the `ARANYA_CAPI` environment variable has been set to the desired tracing log level.
 * E.g. `ARANYA_CAPI=debug`.
 */
AranyaError aranya_init_logging_ext(struct AranyaExtError *__ext_err);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_client_init`.
 *
 * @relates AranyaClient
 */
AranyaError aranya_client_cleanup(struct AranyaClient *ptr);

/**
 * Releases any resources associated with `ptr`.
 *
 * `ptr` must either be null or initialized by `::aranya_client_init`.
 *
 * @relates AranyaClient
 */
AranyaError aranya_client_cleanup_ext(struct AranyaClient *ptr,
                                      struct AranyaExtError *__ext_err);

#if defined(ENABLE_AFC)
/**
 * Sets the shared memory path that AFC should use for storing channel data.
 *
 * @param cfg a pointer to the afc config builder
 * @param shm_path a string with the shared memory path
 */
AranyaError aranya_afc_config_builder_set_shm_path(struct AranyaAfcConfigBuilder *cfg,
                                                   const char *shm_path);
#endif

#if defined(ENABLE_AFC)
/**
 * Sets the shared memory path that AFC should use for storing channel data.
 *
 * @param cfg a pointer to the afc config builder
 * @param shm_path a string with the shared memory path
 */
AranyaError aranya_afc_config_builder_set_shm_path_ext(struct AranyaAfcConfigBuilder *cfg,
                                                       const char *shm_path,
                                                       struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Sets the maximum number of channels that are stored in shared memory.
 *
 * @param cfg a pointer to the afc config builder
 * @param max_channels the maximum number of channels allowed
 */
AranyaError aranya_afc_config_builder_set_max_channels(struct AranyaAfcConfigBuilder *cfg,
                                                       size_t max_channels);
#endif

#if defined(ENABLE_AFC)
/**
 * Sets the maximum number of channels that are stored in shared memory.
 *
 * @param cfg a pointer to the afc config builder
 * @param max_channels the maximum number of channels allowed
 */
AranyaError aranya_afc_config_builder_set_max_channels_ext(struct AranyaAfcConfigBuilder *cfg,
                                                           size_t max_channels,
                                                           struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Sets the address that the AFC server should bind to for listening.
 *
 * @param cfg a pointer to the afc config builder
 * @param address a string with the address to bind to
 */
AranyaError aranya_afc_config_builder_set_address(struct AranyaAfcConfigBuilder *cfg,
                                                  const char *address);
#endif

#if defined(ENABLE_AFC)
/**
 * Sets the address that the AFC server should bind to for listening.
 *
 * @param cfg a pointer to the afc config builder
 * @param address a string with the address to bind to
 */
AranyaError aranya_afc_config_builder_set_address_ext(struct AranyaAfcConfigBuilder *cfg,
                                                      const char *address,
                                                      struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Attempts to construct an [`AranyaAfcConfig`](@ref AranyaAfcConfig), returning an `Error::Bug`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the afc config builder
 * @param out a pointer to write the afc config to
 */
AranyaError aranya_afc_config_builder_build(struct AranyaAfcConfigBuilder *cfg,
                                            struct AranyaAfcConfig *out);
#endif

#if defined(ENABLE_AFC)
/**
 * Attempts to construct an [`AranyaAfcConfig`](@ref AranyaAfcConfig), returning an `Error::Bug`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the afc config builder
 * @param out a pointer to write the afc config to
 */
AranyaError aranya_afc_config_builder_build_ext(struct AranyaAfcConfigBuilder *cfg,
                                                struct AranyaAfcConfig *out,
                                                struct AranyaExtError *__ext_err);
#endif

/**
 * Sets the daemon address that the Client should try to connect to.
 *
 * @param cfg a pointer to the client config builder
 * @param address a string containing the address
 */
AranyaError aranya_client_config_builder_set_daemon_addr(struct AranyaClientConfigBuilder *cfg,
                                                         const char *address);

/**
 * Sets the daemon address that the Client should try to connect to.
 *
 * @param cfg a pointer to the client config builder
 * @param address a string containing the address
 */
AranyaError aranya_client_config_builder_set_daemon_addr_ext(struct AranyaClientConfigBuilder *cfg,
                                                             const char *address,
                                                             struct AranyaExtError *__ext_err);

#if defined(ENABLE_AFC)
/**
 * Sets the configuration for Aranya Fast Channels.
 *
 * @param cfg a pointer to the client config builder
 * @param afc_config a pointer to a valid AFC config (see [`AranyaAfcConfigBuilder`](@ref AranyaAfcConfigBuilder))
 */
AranyaError aranya_client_config_builder_set_afc_config(struct AranyaClientConfigBuilder *cfg,
                                                        struct AranyaAfcConfig *afc_config);
#endif

#if defined(ENABLE_AFC)
/**
 * Sets the configuration for Aranya Fast Channels.
 *
 * @param cfg a pointer to the client config builder
 * @param afc_config a pointer to a valid AFC config (see [`AranyaAfcConfigBuilder`](@ref AranyaAfcConfigBuilder))
 */
AranyaError aranya_client_config_builder_set_afc_config_ext(struct AranyaClientConfigBuilder *cfg,
                                                            struct AranyaAfcConfig *afc_config,
                                                            struct AranyaExtError *__ext_err);
#endif

/**
 * Attempts to construct a [`AranyaClientConfig`](@ref AranyaClientConfig), returning an `Error::Bug`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the client config builder
 * @param out a pointer to write the client config to
 */
AranyaError aranya_client_config_builder_build(struct AranyaClientConfigBuilder *cfg,
                                               struct AranyaClientConfig *out);

/**
 * Attempts to construct a [`AranyaClientConfig`](@ref AranyaClientConfig), returning an `Error::Bug`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the client config builder
 * @param out a pointer to write the client config to
 */
AranyaError aranya_client_config_builder_build_ext(struct AranyaClientConfigBuilder *cfg,
                                                   struct AranyaClientConfig *out,
                                                   struct AranyaExtError *__ext_err);

/**
 * Initializes a new client instance.
 *
 * @param client the uninitialized Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param config the client's configuration [`AranyaClientConfig`](@ref AranyaClientConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_client_init(struct AranyaClient *client,
                               const struct AranyaClientConfig *config);

/**
 * Initializes a new client instance.
 *
 * @param client the uninitialized Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param config the client's configuration [`AranyaClientConfig`](@ref AranyaClientConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_client_init_ext(struct AranyaClient *client,
                                   const struct AranyaClientConfig *config,
                                   struct AranyaExtError *__ext_err);

/**
 * Gets the public key bundle for this device.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param __output the client's key bundle [`AranyaKeyBundle`](@ref AranyaKeyBundle).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_key_bundle(struct AranyaClient *client,
                                  struct AranyaKeyBundle *__output);

/**
 * Gets the public key bundle for this device.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param __output the client's key bundle [`AranyaKeyBundle`](@ref AranyaKeyBundle).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_key_bundle_ext(struct AranyaClient *client,
                                      struct AranyaKeyBundle *__output,
                                      struct AranyaExtError *__ext_err);

/**
 * Gets the public device ID.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param __output the client's device ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_device_id(struct AranyaClient *client,
                                 struct AranyaDeviceId *__output);

/**
 * Gets the public device ID.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param __output the client's device ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_get_device_id_ext(struct AranyaClient *client,
                                     struct AranyaDeviceId *__output,
                                     struct AranyaExtError *__ext_err);

/**
 * Sets the version of the [`AranyaTeamConfig`](@ref AranyaTeamConfig) to be used.
 *
 * @param cfg a pointer to the team config builder
 * @param version the version of the [`AranyaTeamConfig`](@ref AranyaTeamConfig) to be used
 */
AranyaError aranya_team_config_builder_set_version(struct AranyaTeamConfigBuilder *cfg,
                                                   uint32_t version);

/**
 * Sets the version of the [`AranyaTeamConfig`](@ref AranyaTeamConfig) to be used.
 *
 * @param cfg a pointer to the team config builder
 * @param version the version of the [`AranyaTeamConfig`](@ref AranyaTeamConfig) to be used
 */
AranyaError aranya_team_config_builder_set_version_ext(struct AranyaTeamConfigBuilder *cfg,
                                                       uint32_t version,
                                                       struct AranyaExtError *__ext_err);

/**
 * Attempts to construct a [`AranyaTeamConfig`](@ref AranyaTeamConfig), returning an `Error::Bug`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the team config builder
 * @param out a pointer to write the team config to
 */
AranyaError aranya_team_config_builder_build(struct AranyaTeamConfigBuilder *cfg,
                                             struct AranyaTeamConfig *out);

/**
 * Attempts to construct a [`AranyaTeamConfig`](@ref AranyaTeamConfig), returning an `Error::Bug`
 * if there are invalid parameters.
 *
 * @param cfg a pointer to the team config builder
 * @param out a pointer to write the team config to
 */
AranyaError aranya_team_config_builder_build_ext(struct AranyaTeamConfigBuilder *cfg,
                                                 struct AranyaTeamConfig *out,
                                                 struct AranyaExtError *__ext_err);

/**
 * Create a new graph/team with the current device as the owner.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 * @param __output the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_team(struct AranyaClient *client,
                               const struct AranyaTeamConfig *cfg,
                               struct AranyaTeamId *__output);

/**
 * Create a new graph/team with the current device as the owner.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 * @param __output the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_team_ext(struct AranyaClient *client,
                                   const struct AranyaTeamConfig *cfg,
                                   struct AranyaTeamId *__output,
                                   struct AranyaExtError *__ext_err);

/**
 * Add a team to the local device store.
 *
 * NOTE: this function is unfinished and will panic if called.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_team(struct AranyaClient *client,
                            const struct AranyaTeamId *team,
                            const struct AranyaTeamConfig *cfg);

/**
 * Add a team to the local device store.
 *
 * NOTE: this function is unfinished and will panic if called.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param cfg the Team Configuration [`AranyaTeamConfig`](@ref AranyaTeamConfig).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_team_ext(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                const struct AranyaTeamConfig *cfg,
                                struct AranyaExtError *__ext_err);

/**
 * Remove a team from the local device store.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_team(struct AranyaClient *client,
                               const struct AranyaTeamId *team);

/**
 * Remove a team from the local device store.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_team_ext(struct AranyaClient *client,
                                   const struct AranyaTeamId *team,
                                   struct AranyaExtError *__ext_err);

/**
 * Add the peer for automatic periodic Aranya state syncing.
 *
 * If a peer is not reachable on the network, sync errors
 * will appear in the tracing logs and
 * Aranya will be unable to sync state with that peer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 * @param interval the time [`AranyaDuration`](@ref AranyaDuration) to wait between syncs with peer.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_sync_peer(struct AranyaClient *client,
                                 const struct AranyaTeamId *team,
                                 AranyaAddr addr,
                                 AranyaDuration interval);

/**
 * Add the peer for automatic periodic Aranya state syncing.
 *
 * If a peer is not reachable on the network, sync errors
 * will appear in the tracing logs and
 * Aranya will be unable to sync state with that peer.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 * @param interval the time [`AranyaDuration`](@ref AranyaDuration) to wait between syncs with peer.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_sync_peer_ext(struct AranyaClient *client,
                                     const struct AranyaTeamId *team,
                                     AranyaAddr addr,
                                     AranyaDuration interval,
                                     struct AranyaExtError *__ext_err);

/**
 * Remove the peer from automatic Aranya state syncing.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_sync_peer(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    AranyaAddr addr);

/**
 * Remove the peer from automatic Aranya state syncing.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param addr the peer's Aranya network address [`AranyaAddr`](@ref AranyaAddr).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_sync_peer_ext(struct AranyaClient *client,
                                        const struct AranyaTeamId *team,
                                        AranyaAddr addr,
                                        struct AranyaExtError *__ext_err);

/**
 * Close the team and stop all operations on the graph.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_close_team(struct AranyaClient *client,
                              const struct AranyaTeamId *team);

/**
 * Close the team and stop all operations on the graph.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_close_team_ext(struct AranyaClient *client,
                                  const struct AranyaTeamId *team,
                                  struct AranyaExtError *__ext_err);

/**
 * Add a device to the team with the default role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param keys the device's public key bundle [`AranyaKeyBundle`](@ref AranyaKeyBundle).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_device_to_team(struct AranyaClient *client,
                                      const struct AranyaTeamId *team,
                                      const struct AranyaKeyBundle *keys);

/**
 * Add a device to the team with the default role.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param keys the device's public key bundle [`AranyaKeyBundle`](@ref AranyaKeyBundle).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_add_device_to_team_ext(struct AranyaClient *client,
                                          const struct AranyaTeamId *team,
                                          const struct AranyaKeyBundle *keys,
                                          struct AranyaExtError *__ext_err);

/**
 * Remove a device from the team.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_device_from_team(struct AranyaClient *client,
                                           const struct AranyaTeamId *team,
                                           const struct AranyaDeviceId *device);

/**
 * Remove a device from the team.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_remove_device_from_team_ext(struct AranyaClient *client,
                                               const struct AranyaTeamId *team,
                                               const struct AranyaDeviceId *device,
                                               struct AranyaExtError *__ext_err);

/**
 * Assign a role to a device.
 *
 * This will change the device's current role to the new role assigned.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to assign to the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_role(struct AranyaClient *client,
                               const struct AranyaTeamId *team,
                               const struct AranyaDeviceId *device,
                               AranyaRole role);

/**
 * Assign a role to a device.
 *
 * This will change the device's current role to the new role assigned.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to assign to the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_role_ext(struct AranyaClient *client,
                                   const struct AranyaTeamId *team,
                                   const struct AranyaDeviceId *device,
                                   AranyaRole role,
                                   struct AranyaExtError *__ext_err);

/**
 * Revoke a role from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to revoke from the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_role(struct AranyaClient *client,
                               const struct AranyaTeamId *team,
                               const struct AranyaDeviceId *device,
                               AranyaRole role);

/**
 * Revoke a role from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param role the role [`AranyaRole`](@ref AranyaRole) to revoke from the device.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_role_ext(struct AranyaClient *client,
                                   const struct AranyaTeamId *team,
                                   const struct AranyaDeviceId *device,
                                   AranyaRole role,
                                   struct AranyaExtError *__ext_err);

/**
 * Associate a network identifier to a device for use with AQC.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * If the address already exists for this device, it is replaced with the new address. Capable
 * of resolving addresses via DNS, required to be statically mapped to IPV4. For use with
 * OpenChannel and receiving messages. Can take either DNS name or IPV4.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_assign_net_identifier(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaDeviceId *device,
                                             AranyaNetIdentifier net_identifier);

/**
 * Associate a network identifier to a device for use with AQC.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * If the address already exists for this device, it is replaced with the new address. Capable
 * of resolving addresses via DNS, required to be statically mapped to IPV4. For use with
 * OpenChannel and receiving messages. Can take either DNS name or IPV4.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_assign_net_identifier_ext(struct AranyaClient *client,
                                                 const struct AranyaTeamId *team,
                                                 const struct AranyaDeviceId *device,
                                                 AranyaNetIdentifier net_identifier,
                                                 struct AranyaExtError *__ext_err);

/**
 * Disassociate an AQC network identifier from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_remove_net_identifier(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaDeviceId *device,
                                             AranyaNetIdentifier net_identifier);

/**
 * Disassociate an AQC network identifier from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_aqc_remove_net_identifier_ext(struct AranyaClient *client,
                                                 const struct AranyaTeamId *team,
                                                 const struct AranyaDeviceId *device,
                                                 AranyaNetIdentifier net_identifier,
                                                 struct AranyaExtError *__ext_err);

/**
 * Create a channel label.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel) to create.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_label(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                AranyaLabel label);

/**
 * Create a channel label.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel) to create.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_create_label_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    AranyaLabel label,
                                    struct AranyaExtError *__ext_err);

/**
 * Delete a channel label.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param label the channel label [`AranyaLabel`](@ref AranyaLabel) to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_delete_label(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                AranyaLabel label);

/**
 * Delete a channel label.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param label the channel label [`AranyaLabel`](@ref AranyaLabel) to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_delete_label_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    AranyaLabel label,
                                    struct AranyaExtError *__ext_err);

/**
 * Assign an AFC label to a device so that it can be used for an AFC channel.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to assign the label to.
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_label(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                const struct AranyaDeviceId *device,
                                AranyaLabel label);

/**
 * Assign an AFC label to a device so that it can be used for an AFC channel.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to assign the label to.
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_assign_label_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    const struct AranyaDeviceId *device,
                                    AranyaLabel label,
                                    struct AranyaExtError *__ext_err);

/**
 * Revoke an AFC label from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to revoke the label from.
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_label(struct AranyaClient *client,
                                const struct AranyaTeamId *team,
                                const struct AranyaDeviceId *device,
                                AranyaLabel label);

/**
 * Revoke an AFC label from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device ID [`AranyaDeviceId`](@ref AranyaDeviceId) of the device to revoke the label from.
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_revoke_label_ext(struct AranyaClient *client,
                                    const struct AranyaTeamId *team,
                                    const struct AranyaDeviceId *device,
                                    AranyaLabel label,
                                    struct AranyaExtError *__ext_err);

#if defined(ENABLE_AFC)
/**
 * Associate an AFC network identifier to a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * If the address already exists for this device, it is replaced with the new address. Capable
 * of resolving addresses via DNS, required to be statically mapped to IPV4. For use with
 * OpenChannel and receiving messages. Can take either DNS name or IPV4.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_assign_net_identifier(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaDeviceId *device,
                                             AranyaNetIdentifier net_identifier);
#endif

#if defined(ENABLE_AFC)
/**
 * Associate an AFC network identifier to a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * If the address already exists for this device, it is replaced with the new address. Capable
 * of resolving addresses via DNS, required to be statically mapped to IPV4. For use with
 * OpenChannel and receiving messages. Can take either DNS name or IPV4.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_assign_net_identifier_ext(struct AranyaClient *client,
                                                 const struct AranyaTeamId *team,
                                                 const struct AranyaDeviceId *device,
                                                 AranyaNetIdentifier net_identifier,
                                                 struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Disassociate an AFC network identifier from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_remove_net_identifier(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             const struct AranyaDeviceId *device,
                                             AranyaNetIdentifier net_identifier);
#endif

#if defined(ENABLE_AFC)
/**
 * Disassociate an AFC network identifier from a device.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param net_identifier the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_remove_net_identifier_ext(struct AranyaClient *client,
                                                 const struct AranyaTeamId *team,
                                                 const struct AranyaDeviceId *device,
                                                 AranyaNetIdentifier net_identifier,
                                                 struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Create an Aranya Fast Channel (AFC).
 *
 * Creates a bidirectional AFC channel between the current device
 * and another peer.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param peer the peer's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel) to create the channel with.
 * @param __output the channel's ID [`AranyaChannelId`](@ref AranyaChannelId)
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_create_bidi_channel(struct AranyaClient *client,
                                           const struct AranyaTeamId *team,
                                           AranyaNetIdentifier peer,
                                           AranyaLabel label,
                                           struct AranyaChannelId *__output);
#endif

#if defined(ENABLE_AFC)
/**
 * Create an Aranya Fast Channel (AFC).
 *
 * Creates a bidirectional AFC channel between the current device
 * and another peer.
 *
 * Permission to perform this operation is checked against the Aranya policy.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param peer the peer's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 * @param label the AFC channel label [`AranyaLabel`](@ref AranyaLabel) to create the channel with.
 * @param __output the channel's ID [`AranyaChannelId`](@ref AranyaChannelId)
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_create_bidi_channel_ext(struct AranyaClient *client,
                                               const struct AranyaTeamId *team,
                                               AranyaNetIdentifier peer,
                                               AranyaLabel label,
                                               struct AranyaChannelId *__output,
                                               struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Delete an Aranya Fast Channel (AFC).
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AFC channel ID [`AranyaChannelId`](@ref AranyaChannelId) of the channel to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_delete_channel(struct AranyaClient *client,
                                      struct AranyaChannelId chan);
#endif

#if defined(ENABLE_AFC)
/**
 * Delete an Aranya Fast Channel (AFC).
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AFC channel ID [`AranyaChannelId`](@ref AranyaChannelId) of the channel to delete.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_delete_channel_ext(struct AranyaClient *client,
                                          struct AranyaChannelId chan,
                                          struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Poll for new Aranya Fast Channels (AFC) data.
 *
 * If the operation times out, this will return an `::ARANYA_ERROR_TIMEOUT`.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param timeout how long to wait before timing out the poll operation [`AranyaDuration`](@ref AranyaDuration).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_poll_data(struct AranyaClient *client,
                                 AranyaDuration timeout);
#endif

#if defined(ENABLE_AFC)
/**
 * Poll for new Aranya Fast Channels (AFC) data.
 *
 * If the operation times out, this will return an `::ARANYA_ERROR_TIMEOUT`.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param timeout how long to wait before timing out the poll operation [`AranyaDuration`](@ref AranyaDuration).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_poll_data_ext(struct AranyaClient *client,
                                     AranyaDuration timeout,
                                     struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Send Aranya Fast Channels (AFC) data.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AFC channel's ID [`AranyaChannelId`](@ref AranyaChannelId).
 * @param data raw bytes of data to send.
 * @param data_len length of data to send.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_send_data(struct AranyaClient *client,
                                 struct AranyaChannelId chan,
                                 const uint8_t *data,
                                 size_t data_len);
#endif

#if defined(ENABLE_AFC)
/**
 * Send Aranya Fast Channels (AFC) data.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param chan the AFC channel's ID [`AranyaChannelId`](@ref AranyaChannelId).
 * @param data raw bytes of data to send.
 * @param data_len length of data to send.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_send_data_ext(struct AranyaClient *client,
                                     struct AranyaChannelId chan,
                                     const uint8_t *data,
                                     size_t data_len,
                                     struct AranyaExtError *__ext_err);
#endif

#if defined(ENABLE_AFC)
/**
 * Receive Aranya Fast Channels (AFC) data.
 *
 * @param client the Aranya Client.
 * @param buf buffer to store message into.
 * @param buf_len length of buffer.
 * @param info information about the message [`AranyaAfcMsgInfo`](@ref AranyaAfcMsgInfo).
 * @result A boolean indicating whether any data was available.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_recv_data(struct AranyaClient *client,
                                 uint8_t *buf,
                                 size_t *buf_len,
                                 struct AranyaAfcMsgInfo *info,
                                 bool *__output);
#endif

#if defined(ENABLE_AFC)
/**
 * Receive Aranya Fast Channels (AFC) data.
 *
 * @param client the Aranya Client.
 * @param buf buffer to store message into.
 * @param buf_len length of buffer.
 * @param info information about the message [`AranyaAfcMsgInfo`](@ref AranyaAfcMsgInfo).
 * @result A boolean indicating whether any data was available.
 *
 * @relates AranyaClient.
 */
AranyaError aranya_afc_recv_data_ext(struct AranyaClient *client,
                                     uint8_t *buf,
                                     size_t *buf_len,
                                     struct AranyaAfcMsgInfo *info,
                                     bool *__output,
                                     struct AranyaExtError *__ext_err);
#endif

/**
 * Query devices on team.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param devices returns a list of device IDs on the team [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param devices_len returns the length of the devices list [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_devices_on_team(struct AranyaClient *client,
                                         const struct AranyaTeamId *team,
                                         struct AranyaDeviceId *devices,
                                         size_t *devices_len);

/**
 * Query devices on team.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param devices returns a list of device IDs on the team [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param devices_len returns the length of the devices list [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_devices_on_team_ext(struct AranyaClient *client,
                                             const struct AranyaTeamId *team,
                                             struct AranyaDeviceId *devices,
                                             size_t *devices_len,
                                             struct AranyaExtError *__ext_err);

/**
 * Writes the human-readable encoding of `device` to `str`.
 *
 * To always succeed, `str` must be at least `ARANYA_DEVICE_ID_STR_LEN` bytes long.
 *
 * @param device ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param device ID string [`AranyaDeviceId`](@ref AranyaDeviceId).
 *
 * @relates AranyaError.
 */
AranyaError aranya_device_id_to_str(struct AranyaDeviceId device,
                                    char *str,
                                    size_t *str_len);

/**
 * Query device's keybundle.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param __output the device's key bundle [`AranyaKeyBundle`](@ref AranyaKeyBundle).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_keybundle(struct AranyaClient *client,
                                          const struct AranyaTeamId *team,
                                          const struct AranyaDeviceId *device,
                                          struct AranyaKeyBundle *__output);

/**
 * Query device's keybundle.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param __output the device's key bundle [`AranyaKeyBundle`](@ref AranyaKeyBundle).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_keybundle_ext(struct AranyaClient *client,
                                              const struct AranyaTeamId *team,
                                              const struct AranyaDeviceId *device,
                                              struct AranyaKeyBundle *__output,
                                              struct AranyaExtError *__ext_err);

/**
 * Query device label assignments.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param labels returns a list of labels assigned to the device [`AranyaLabel`](@ref AranyaLabel).
 * @param labels_len returns the length of the labels list [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_label_assignments(struct AranyaClient *client,
                                                  const struct AranyaTeamId *team,
                                                  const struct AranyaDeviceId *device,
                                                  uint32_t *labels,
                                                  size_t *labels_len);

/**
 * Query device label assignments.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param labels returns a list of labels assigned to the device [`AranyaLabel`](@ref AranyaLabel).
 * @param labels_len returns the length of the labels list [`AranyaLabel`](@ref AranyaLabel).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_device_label_assignments_ext(struct AranyaClient *client,
                                                      const struct AranyaTeamId *team,
                                                      const struct AranyaDeviceId *device,
                                                      uint32_t *labels,
                                                      size_t *labels_len,
                                                      struct AranyaExtError *__ext_err);

#if defined(ENABLE_AFC)
/**
 * Query device's AFC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param network identifier string [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_afc_net_identifier(struct AranyaClient *client,
                                            const struct AranyaTeamId *team,
                                            const struct AranyaDeviceId *device,
                                            char *ident,
                                            size_t *ident_len,
                                            bool *__output);
#endif

#if defined(ENABLE_AFC)
/**
 * Query device's AFC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param network identifier string [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_afc_net_identifier_ext(struct AranyaClient *client,
                                                const struct AranyaTeamId *team,
                                                const struct AranyaDeviceId *device,
                                                char *ident,
                                                size_t *ident_len,
                                                bool *__output,
                                                struct AranyaExtError *__ext_err);
#endif

/**
 * Query device's AQC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param network identifier string [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_aqc_net_identifier(struct AranyaClient *client,
                                            const struct AranyaTeamId *team,
                                            const struct AranyaDeviceId *device,
                                            char *ident,
                                            size_t *ident_len,
                                            bool *__output);

/**
 * Query device's AQC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param network identifier string [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_aqc_net_identifier_ext(struct AranyaClient *client,
                                                const struct AranyaTeamId *team,
                                                const struct AranyaDeviceId *device,
                                                char *ident,
                                                size_t *ident_len,
                                                bool *__output,
                                                struct AranyaExtError *__ext_err);

/**
 * Query device's AQC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param __output the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_label_exists(struct AranyaClient *client,
                                      const struct AranyaTeamId *team,
                                      const AranyaLabel *label,
                                      bool *__output);

/**
 * Query device's AQC network identifier.
 *
 * @param client the Aranya Client [`AranyaClient`](@ref AranyaClient).
 * @param team the team's ID [`AranyaTeamId`](@ref AranyaTeamId).
 * @param device the device's ID [`AranyaDeviceId`](@ref AranyaDeviceId).
 * @param __output the device's network identifier [`AranyaNetIdentifier`](@ref AranyaNetIdentifier).
 *
 * @relates AranyaClient.
 */
AranyaError aranya_query_label_exists_ext(struct AranyaClient *client,
                                          const struct AranyaTeamId *team,
                                          const AranyaLabel *label,
                                          bool *__output,
                                          struct AranyaExtError *__ext_err);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* ARANYA_CLIENT_H */


