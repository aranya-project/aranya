//! This code is @generated by `policy-ifgen`. DO NOT EDIT.
#![allow(clippy::duplicated_attributes)]
#![allow(clippy::enum_variant_names)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]
extern crate alloc;
use alloc::vec::Vec;
use aranya_policy_ifgen::{
    macros::{action, actions, effect, effects, value},
    BaseId, ClientError, Value, Text,
};
#[derive(Debug)]
pub enum Persistent {}
#[derive(Debug)]
pub enum Ephemeral {}
/// KeyBundle policy struct.
#[value]
pub struct KeyBundle {
    pub ident_key: Vec<u8>,
    pub sign_key: Vec<u8>,
    pub enc_key: Vec<u8>,
}
/// ChanOp policy enum.
#[value]
pub enum ChanOp {
    RecvOnly,
    SendOnly,
    SendRecv,
}
/// Role policy enum.
#[value]
pub enum Role {
    Owner,
    Admin,
    Operator,
    Member,
}
/// Enum of policy effects that can occur in response to a policy action.
#[effects]
pub enum Effect {
    AdminAssigned(AdminAssigned),
    AdminRevoked(AdminRevoked),
    AfcUniChannelCreated(AfcUniChannelCreated),
    AfcUniChannelReceived(AfcUniChannelReceived),
    LabelAssigned(LabelAssigned),
    LabelCreated(LabelCreated),
    LabelDeleted(LabelDeleted),
    LabelRevoked(LabelRevoked),
    MemberAdded(MemberAdded),
    MemberRemoved(MemberRemoved),
    OperatorAssigned(OperatorAssigned),
    OperatorRevoked(OperatorRevoked),
    OwnerAssigned(OwnerAssigned),
    OwnerRevoked(OwnerRevoked),
    QueriedLabel(QueriedLabel),
    QueriedLabelAssignment(QueriedLabelAssignment),
    QueryDeviceKeyBundleResult(QueryDeviceKeyBundleResult),
    QueryDeviceRoleResult(QueryDeviceRoleResult),
    QueryDevicesOnTeamResult(QueryDevicesOnTeamResult),
    QueryLabelExistsResult(QueryLabelExistsResult),
    TeamCreated(TeamCreated),
    TeamTerminated(TeamTerminated),
}
/// AdminAssigned policy effect.
#[effect]
pub struct AdminAssigned {
    pub device_id: BaseId,
}
/// AdminRevoked policy effect.
#[effect]
pub struct AdminRevoked {
    pub device_id: BaseId,
}
/// AfcUniChannelCreated policy effect.
#[effect]
pub struct AfcUniChannelCreated {
    pub parent_cmd_id: BaseId,
    pub receiver_id: BaseId,
    pub author_enc_key_id: BaseId,
    pub peer_enc_pk: Vec<u8>,
    pub label_id: BaseId,
    pub channel_key_id: BaseId,
    pub encap: Vec<u8>,
}
/// AfcUniChannelReceived policy effect.
#[effect]
pub struct AfcUniChannelReceived {
    pub parent_cmd_id: BaseId,
    pub sender_id: BaseId,
    pub author_enc_pk: Vec<u8>,
    pub peer_enc_key_id: BaseId,
    pub label_id: BaseId,
    pub encap: Vec<u8>,
}
/// LabelAssigned policy effect.
#[effect]
pub struct LabelAssigned {
    pub label_id: BaseId,
    pub label_name: Text,
    pub label_author_id: BaseId,
    pub author_id: BaseId,
}
/// LabelCreated policy effect.
#[effect]
pub struct LabelCreated {
    pub label_id: BaseId,
    pub label_name: Text,
    pub label_author_id: BaseId,
}
/// LabelDeleted policy effect.
#[effect]
pub struct LabelDeleted {
    pub label_name: Text,
    pub label_author_id: BaseId,
    pub label_id: BaseId,
    pub author_id: BaseId,
}
/// LabelRevoked policy effect.
#[effect]
pub struct LabelRevoked {
    pub device_id: BaseId,
    pub label_id: BaseId,
    pub label_name: Text,
    pub label_author_id: BaseId,
    pub author_id: BaseId,
}
/// MemberAdded policy effect.
#[effect]
pub struct MemberAdded {
    pub device_id: BaseId,
    pub device_keys: KeyBundle,
}
/// MemberRemoved policy effect.
#[effect]
pub struct MemberRemoved {
    pub device_id: BaseId,
}
/// OperatorAssigned policy effect.
#[effect]
pub struct OperatorAssigned {
    pub device_id: BaseId,
}
/// OperatorRevoked policy effect.
#[effect]
pub struct OperatorRevoked {
    pub device_id: BaseId,
}
/// OwnerAssigned policy effect.
#[effect]
pub struct OwnerAssigned {
    pub device_id: BaseId,
}
/// OwnerRevoked policy effect.
#[effect]
pub struct OwnerRevoked {
    pub device_id: BaseId,
}
/// QueriedLabel policy effect.
#[effect]
pub struct QueriedLabel {
    pub label_id: BaseId,
    pub label_name: Text,
    pub label_author_id: BaseId,
}
/// QueriedLabelAssignment policy effect.
#[effect]
pub struct QueriedLabelAssignment {
    pub device_id: BaseId,
    pub label_id: BaseId,
    pub label_name: Text,
    pub label_author_id: BaseId,
}
/// QueryDeviceKeyBundleResult policy effect.
#[effect]
pub struct QueryDeviceKeyBundleResult {
    pub device_keys: KeyBundle,
}
/// QueryDeviceRoleResult policy effect.
#[effect]
pub struct QueryDeviceRoleResult {
    pub role: Role,
}
/// QueryDevicesOnTeamResult policy effect.
#[effect]
pub struct QueryDevicesOnTeamResult {
    pub device_id: BaseId,
}
/// QueryLabelExistsResult policy effect.
#[effect]
pub struct QueryLabelExistsResult {
    pub label_id: BaseId,
    pub label_name: Text,
    pub label_author_id: BaseId,
}
/// TeamCreated policy effect.
#[effect]
pub struct TeamCreated {
    pub owner_id: BaseId,
}
/// TeamTerminated policy effect.
#[effect]
pub struct TeamTerminated {
    pub owner_id: BaseId,
}
#[actions(interface = Persistent)]
pub enum PersistentAction {
    create_team(create_team),
    terminate_team(terminate_team),
    add_member(add_member),
    remove_member(remove_member),
    assign_role(assign_role),
    revoke_role(revoke_role),
    create_label(create_label),
    delete_label(delete_label),
    assign_label(assign_label),
    revoke_label(revoke_label),
}
#[actions(interface = Ephemeral)]
pub enum EphemeralAction {
    create_afc_uni_channel(create_afc_uni_channel),
    query_label_exists(query_label_exists),
    query_labels(query_labels),
    query_label_assignments(query_label_assignments),
    query_devices_on_team(query_devices_on_team),
    query_device_role(query_device_role),
    query_device_keybundle(query_device_keybundle),
}
/// create_team policy action.
#[action(interface = Persistent)]
pub struct create_team {
    pub owner_keys: KeyBundle,
    pub nonce: Vec<u8>,
}
/// terminate_team policy action.
#[action(interface = Persistent)]
pub struct terminate_team {}
/// add_member policy action.
#[action(interface = Persistent)]
pub struct add_member {
    pub device_keys: KeyBundle,
}
/// remove_member policy action.
#[action(interface = Persistent)]
pub struct remove_member {
    pub device_id: BaseId,
}
/// assign_role policy action.
#[action(interface = Persistent)]
pub struct assign_role {
    pub device_id: BaseId,
    pub role: Role,
}
/// revoke_role policy action.
#[action(interface = Persistent)]
pub struct revoke_role {
    pub device_id: BaseId,
    pub role: Role,
}
/// create_afc_uni_channel policy action.
#[action(interface = Ephemeral)]
pub struct create_afc_uni_channel {
    pub receiver_id: BaseId,
    pub label_id: BaseId,
}
/// create_label policy action.
#[action(interface = Persistent)]
pub struct create_label {
    pub name: Text,
}
/// delete_label policy action.
#[action(interface = Persistent)]
pub struct delete_label {
    pub label_id: BaseId,
}
/// assign_label policy action.
#[action(interface = Persistent)]
pub struct assign_label {
    pub device_id: BaseId,
    pub label_id: BaseId,
    pub op: ChanOp,
}
/// revoke_label policy action.
#[action(interface = Persistent)]
pub struct revoke_label {
    pub device_id: BaseId,
    pub label_id: BaseId,
}
/// query_label_exists policy action.
#[action(interface = Ephemeral)]
pub struct query_label_exists {
    pub label_id: BaseId,
}
/// query_labels policy action.
#[action(interface = Ephemeral)]
pub struct query_labels {}
/// query_label_assignments policy action.
#[action(interface = Ephemeral)]
pub struct query_label_assignments {
    pub device_id: BaseId,
}
/// query_devices_on_team policy action.
#[action(interface = Ephemeral)]
pub struct query_devices_on_team {}
/// query_device_role policy action.
#[action(interface = Ephemeral)]
pub struct query_device_role {
    pub device_id: BaseId,
}
/// query_device_keybundle policy action.
#[action(interface = Ephemeral)]
pub struct query_device_keybundle {
    pub device_id: BaseId,
}
